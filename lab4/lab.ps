%!PS-Adobe-2.0
%%Creator: dvips(k) 5.994 Copyright 2014 Radical Eye Software
%%Title: lab.dvi
%%CreationDate: Fri Mar 17 17:38:05 2017
%%Pages: 16
%%PageOrder: Ascend
%%BoundingBox: 0 0 766 383
%%DocumentFonts: CMR10 CMBX12 CMR7 CMSY10 CMTT10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips lab.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.03.17:1738
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /exclam put
dup 34 /quotedbl put
dup 35 /numbersign put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 85 /U put
dup 87 /W put
dup 90 /Z put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /braceleft put
dup 125 /braceright put
dup 126 /asciitilde put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB28702831270DBD25D666FBB0AD7B96E
A44E891EA1EAF0F87013AFC982E33D67A28E96E0C9CB99B9E4192536830D9901
931A8CAFA41289633B20BA3BD7AA3414B6DA8D57CCF2FBE39920CC06361F075B
CC40335DB9A0071CFF77F6B7BB47F3100DBDC9C4A58C2B81EC99E8E966AF3390
E3FBCC28BA1D79961C8A1584266454DF772FBA99664D74D4A89FC82FFEDFCFE1
4C9E4A04291E803D142E37E7ACA66AB279378F2F192FFB2B5BBAD18B95F03136
2CB594A3D6D3F8576B90A6C4DAD6D6C8EE07AF682F925F01D0B26CBA347C03BE
F3B0585CF4539FDC66915E22117078CC94D621F31DCB3E021998A5D6EE94CA4B
E214D07517283D56973D8E4367392BF6C1150DEBF459D141AE0941C1C8C5CFBE
E735D796E365A1B0F60BB4CF2801EAFE4889EE5F338D3C4885368281B3C95CCE
251C28A90D318A8A0384439B38D63B94757252062EA44E88509FDD2E75FAAB71
7329622828B2785C1A8B26351BC7448C1719C88FE99BCB73F7DEA427FBFCDF4F
00EE079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D54BC1DF433517EE593A104
F3E083BFE49E9CFC4269A86B58AAAC141930A2B4193F74FACC1EFAFD38D3EDD8
A6672E3068F4E5FDC99AAA254345C99C06076420E55715665046450EF164C524
F4DCCDE02254E23815458E7F703D2377C26B73B78B9ED3E42F346F6CD79F7F36
55235A7018C0F600C8828A06AA35100F143FF18F738D2A61D1555F907D04E5F6
3A71729A13D3193A46D67488EEF8E05B5BEF2538E8633B7DD321E56DF4B1C765
0630C432BAC0E607C1EE5D3872008F9AC757992A6A028625EC7A119C50104A35
4F85E83600D55508E00BB0FE0C1257769C8BEA7D15C90C0727C76CC3E25AF16A
8C64BB2C7917D7CF37BA170E3CFBF0C0DE305E7AD2C9148073A860D205AE370E
3B7357956F55F7CAC4E40CE6E055A2B64148A3F5692642D746ECEC4B91C16CA8
E4C21AC96F55B9C7706EA87C2A4C5D8707C8787892EA867529EA500AB8CF86E6
483031F98EF3E46056FE085A0BBE449DC1472CEC5F128205B3E22EBC6C5F7B0E
49916539D897D900C10EB6B5399326C9020D50349BA90A6860DC939EE6B00CD2
FE2D40ACC785B67F1972701CCAA045ADE5245DD627628FF3A08324C85357222E
5B02DFC74B3341F7EC24A9DEACAA1A235FDEEFE33E1D796B6FBB910B766B0D3E
E1B26A165BF75291EF6E74899AB3A9D824CE570B011DD8FAE438A579EBA81C04
56BF0297BBD91F79D3C27A492C868CFD111E32142FFBE619C913167627291251
DC7D7BC17DE5C1F30927AF998EF7264776EA0DADC0C8834BE9EC41F48E158D36
EF7971BCD5EEB6D143F745DFFED758C7DE4938EF1CA41B9617BBB17946419D97
7FC35977447AA55E17CB51F5A52D75E95EC194042007DB1738809DC388263F35
639AE074CCAE5B6CEB2B2A3C2AD024A8B83F05622BF0262644AD85AEAF5A1D65
924D799213082338DDBB0A07D0FF2E3E78D108E4C748F811E89982C36764885D
030D31D34D1B8FA4070B77C6D79C45080E7689D2383F8D082AC5C1C042FAD0C2
7799AB4E81C6B094661D61FF31B513DD3952F78F1E654CD539960E64205FA1EA
830591B0C92761BC2059775A54396437F4E779CBBD9EB449AFE15FFD0BD93106
2D95B42EF3C49DF4226A1D3A4FD72BA63E738ECA67BA5FA88AB0B3BDB2B06827
EBA43E6D8FB3E685857F3C4525E9F54CDC9E19D96789832C45F55153715473FA
5E932523DE94CFBB46078310B838D47D96F6F9D28E7A9AEC25CE3652A01C7033
64FBA6B2E61159468BBAC06BACA6922D54F62212CCCCC161EFBB8ED347C0FB3A
68121F4242394957D2B103FF247068EF9B100DB46719A3CB36179839AE1AB0CC
95D768C7121AC6D6FF79A33CEBD6D9D9737432C982165ED82C45D26F55C4411B
08E81224500D4E89F4CDB138D2DB39AE9762117CAC1CDD09F9C9736C5E8C94F6
7BFD060EE61CA4645F5231BC00CFE36F7D76ECD2AEEE645A16594E0FFA8B57D3
4147B4E7D1A68B8A9403FF86C786310FB56511D79CEDBA8BEEFEACBBDA097BD5
0141C7FCF87D89DCD39308B22167773D41530EA50E3834072307606D8F35D780
C30DF36D6CFF01F67653D8D60E59F329765CE23E410DD2C1658D75329247C70C
BC87665948141CA2FF956C22D3F96CD779295A61E4AF5931E40C89593ADC9673
49244C62877D564A9207E20153395D1F42ACAB862D1D67E743A17B338A981AFB
FB0A124B8756FE32F1FF4532326726F411C3E604231E3E61D172183B116D43AF
34185B6C37C758E78F15D13B3F255396C2B69433E81A87083397D4302A1F7EC4
B45EC5F7D9DCA52F5EE24C88A8DBF9A1414986191ED60DC5D111044909FD266B
F328D2E54EBB4A1E1F848C1A5178EAFB2129962C500896E3D92429AE15B4240D
2D21D3F1A366A2B29D8374EC59EE2D2E9CD545B8356891775B2DF1F871924C62
5278CEB62AFF2C602F85278D42BDEB8F858094DF755F2C3269E7A5833A6A4EE0
E75EF619C1262B4249BA9ACCEB8F188647382BE1B7891A84B9697E22FC61EE57
55658EC6EBC2D53F8F553A5D1A5F176EABC95AF32E02882D0C335AA2B9D46F61
E5A1513CEE9710990C947A9B2C01859044DDF7D762EDB4F922DF5E63C2F7AB6A
03741A86E50823FEBD81172C3E68D4834F110BA34EEFF9B5E9235432ABA6ED08
E56342C64BFA79ECB0673C930E177C708F0F49D5F9ECB44668D04C38C598D862
EBED430D88683923C1F12EBBC12F4A8EC9017860DDE223A1915F170AF47B6661
102BB2F9833F9621D5F1701ED8F83F1BEF281D6D2E87FF5FCBA48BFB38EFFF24
D7BF39800F927EAA1BC80BC5C47452E21A1D6CD09B0985EF227738D0692718A7
A8C9F5071193E20931113CE4C0F3A18E54817F7B5D1A2C21B85D0E80824D9BCF
1E4B1EAED5F2337EAB4F70211C07C3516747166107D6C1A4FA79A0D034442174
8556E7576C602D6A4DA1720790B0B6722BE1CA9BAECC373276D0A4757D7A20E9
2B06B752902C2CAB9268189B7BFCC3A6B97E1F5FFCC2414DDE57E41A41B4E83E
09ADFFD3C7D25B0B2FD0E9A1F188E72E0D6604580CDC0B07E9FBAD36E31C27D1
41234E6CA6A3856497B133D8CC39DD09665F07D0862160DDBEC424C3BFCA0720
2EF750510067B89736E9F42B9A002F13D2A65FA089536B69FE317D4933E1E097
ADD3900A0F620FAC59B411CA7266C9A3AA5D069D9D7FD8981FCBAA65ACEE9A1C
8FB7FD9390F52D7EEA2F8DB5E31465076B38D3D5274423D544AA916E68FBBEDE
93C684D85B8684778DAA858F8C974EBBAC0CF7CE13F17B38C5D5F943874F4AE5
5118EA3FCEE3700BA4B379CE80AB06468DC0B3AC87CB95DC61002BE6D33A3FEC
C4F465F68D114D0C3750001FDB7D48B1EBE9A6208E862A6204D278365D37630F
72196542ADAD55C4EC9CE6EFFDA65355DD6FC75C3E7B29AC76F612FBD5B04434
C7534697A3FE0CF685B6724744D95D93C45A356CCF29ADE5DC1E7327317D53FA
DC5E8E6D261607F2F22969804D5A88C9BB56C03DAE323AE05E8F02CF53499700
6D81962925ED33AD1E47CDF2D10439CA875C48C5F0EACE9F97B3380B489893E3
B7C7A3BE9AB383218100BF17191900084D05DA6AA010846FA73119291423B7CA
5AE9A9D9B585F9D4914083F33838E2F2AE7F5B6C25A7DD392B5FE51409D57BE4
321D8687ADE49168EFFB996AC61183D84F1B170C7D7834BB148AC088D31FC05D
F791DFB146CA8845917FEE9770471ABDC3EBA2659F4C0057B973E385E5246730
BFB34C790B5512330E3819D266216AD6EB0FAE697E92F35029FA9D8C57C637BC
8752B48C0A26C8082CE9CAA9B51694016A9707761D1ABB438CDD57A1D9DFC587
1ECB4DD9E5BE21324B9AB7CA805AF8C47D514F7434A072717AAC6C885D7291D5
6536D7C8451E95C442D5CB9078CB83E6D53814299E04DC8E61E3E35364667F3F
3C91A57E0D79E034260DF18DDAB0BA5AB424FE858060B59428DF810590BF51B3
162E34DC68F0B10A355630DA2293B80E3C8E312D600C54EFA40B67AC9E836E4C
A1981DFC91E8A4753B9F57A9C21DEA79AEC531B4E05831E8509316D56335A7D3
95FE1B51DE45E56D780FF4277AD5938CEB0DAF9205EE97D90CB3DE86F9885C8B
B435C5ABD44EA485967853034B9984B89AE8C8679B968C055A62FECFDA2F3C1D
923BC69F86B4A4DF174D499DE8D73E043286E7948643C6B1E35BEC5A63FAC495
72D27894E43759E0199BB47BFFCF6D2902B03B60FB105FD5D1C4F47F011D3327
6EB4E80FA49A7C4E600FC1551F4CBB733463E69A5C51702EB750B7906DC8DA85
78BEB511ECBC66EEF5C583CC05D407DF1B93B274BCE710B769779DF92BF480A9
18881F94616345BE25DBDD32588DADF95D69B17C27CC63FE88DDF48AD86629A4
75FC4FAD8B5D62661844D4A8C6D7433CB9D64FD02C5EBBE8BC6AAD854221DD5F
89AF6642B0F3BCC8EDB549F568DD224C5208460B7D27541534BD915E74CC844C
BD3EA3A937A2E123C4EE348EE420FA9C8EE2ED069C4135B78FD09E9D1E5D0B0F
F4BDAE25ABDF90B5484727C5D52AFC3471C7FEE7C8271743542633F797F4A72F
20CC86A83BA7E32EE70BAB15CC18ABE5401888B15A11018C86E9FDA6D6C98EF2
605CE67DA41137E53B21D8F7E03A5F6D9CD994A770B65F95181FF785DA5238E3
60C14F2E5333F374831C7E1BB9BCE375E8A9E5EC8C55FDA200AA6B006327FD24
52E8CE8D331E485BF4982A7E2049ADAC8D79A4E1FD62DCCF26D4DFBE5464452C
E61F700B1DA1C3F5966C62AEC89F0628FDEC52FFE6F9804F67270C233940901D
CCD9ED3A6B75BB5E7B5DD5AE6D248D1036B5B290056C7C32F0D137929E23B84B
0F2D5A29CFDBE433C94ED636BBE1C9F439B9EBF90BBB7DEA2AF9BF3C1482F33C
5D52F280D8D5FB5CE75EEF272DF561DE95B2C3F50406779D7325E5960E04B073
32D5F8C906444D874626921FC88E09532143B11C68A97E997C7F76ABEFD3FB43
EBCB19235F55A5E0B10527E44996DF98336A60E21C17298E93CE95F7F1E36127
F68C87D8518F86D536889753EAB5365403D91978AB98D5C6231B7E18CF7E6B43
43EB3CF1E05EDCAD0241ADBD216ED581934085878DE0BD8F54F49060E5F18FDB
34B999CE5740AB12C8B89185F2B38DEECB92F1E44A6BE88B17D66B831A519408
483E1B62EF8A6E8043AD0A6BF6BF6C768CFD06B09495A13475B59440DB7556F3
E8BD4E83FFFC31BABD861AF7A54925204012B1AA1E510FF1F97ABDDEAF263544
90C557CB2FF5C50374F18475D02FDCADD37662B2C810811BA5708B18E25B29A6
80074418346F2B36C826D6942E626587BC2CA2D5C7C83E8D20EACF45C64CE86E
C2557CEBF2F7FBC6B6669FF8AA8B1C0DD5877A26A7A4C0B28038E8D7B9BC2F61
C31C762F563470E9BA9369C45428D5714C5078BFC934759D5F946801C0AE4468
59F237DB5A83C45B2B5D4839CE0339BF6BC5C06662CA27161DF5319EA26D0B83
D58D6096C835395EC3FF326A56E8D1741A3E028AC621C158FA4234BE3CCEEE82
37D84369F4587E50F5ACA21C5861C66EE70CE5DF2BABADA2E4D18D139B22B43E
5D98E3A4AAE365E01D81503E3E45B8E02C7CD35E83CA030A0FAE31E830C8ABA9
B86AD20BCB216EF63C26AAD84236708F6E9D069A0FE3EB907A2C990FD06E4030
EA395166302D7E03F312070F9BEB3DB3C96458C9FC1B12D181E144A8A1C1DD2E
E753DF31D49B036F6DA0AA29EA8B96B946747AEF887000CA036E1C94FA15E421
592C74140D1F380D60E9F8227189AABB758181B64742B85EE5EBAFBE6320ED60
673A71487DF892736D64FE10D421595F4A62DFA9931D080098FD78E8A3ACAA54
356EB237DEABF0BAF0F94E000B267A5512B11B5399B8C4E6F069E5F1364F4F41
1E8CE5E489D36B7EE2A5F2E91797C19245A5C8B9670B3E8F2BDB39D3575ADAC2
85A72E03EB8861476F25A92F163345FB93446770C3DD74314FCA398C8783434B
D1D27218D7E70863E411B7B3BD2D683CD1C95D2AA5694617E28710AFD39CFA35
1BCFF811FD1CBBA5875C985479DB225944A0182B5B415202118F6896BF3AB64B
CB1D47228D30183705D0625CE9D48A34A46794C2CAF8037977C14E4F0996BE70
32BA42DE4C6A3A4D82D1CC903914D026C1975B2EAE38B0175BBC1C58ADB46D4C
BB4B919F4F7EFDC24B8927A8C5E37FB0639985A4498F91FEFC92A1FEA7DB86FE
757B1AAD7C4275AD42D11A61C04F0BFCD112119D3D3155E7AA4BAD208CA0A3B3
1214F02FEF7B66A14606E253919530DFDD8B9C9935E703CF7B8744FF95548B4F
38D0B1E103A53744DB8D8CE263F7174C8A332B6281B8A2125C3A88086F6CBECF
4E10864EFD178760E2BCCCEB6C275C78BEB130896011C63D9A05DB9F37B06E4B
B4A2BA42CCFD13C1973CF3AF6E96DA6B14BA09B00DA4165F9A76C55D60DB335B
895624CDDD3C3196AED0E6752E4915F8E2FF7D85C09DFBC136EE0FD2983EF1DA
39316309EE2E02745B64DDA6B1B6B2641DD92994268EF9141AA9B769B51C6680
2356C992128FFBFBE6E6A8E7A723E8BD1040C210D4335272967A63A92F191A29
5ADCFF12C2927F885F45011978F9C7A1CDE5BD3EED9BFECB3330AAC7F597C0B3
A77DB4C5352F7762500F47F5E8649BBF001A4E87B224684006FBF49BC22E202B
16EA74F813E7CB30F11EF501F9DA85DB266F4B5EBE9C8010171CFAEA98C6C7FA
06E4EB85A8C59FF10136EB44A8DE87791964C07F54CC547910CA2D4934959C85
46607F8227FA171674CABF2FA3F38E50B62D7B4281DF83CB686DFF1C68915189
7EC25825BC3D5454FAD199D3BF57F41D5BA37525E16F3C764F9D20AD51D74D48
B48D9A3A527AA55E40D75F3E89EC02899613A682667642DE2A97F451B0C0D209
E81234FB058111B6DE49CCC1E20832AF6F8FF7DDF7881E4C77381AE42DC424F8
2D3930B4C171AAC94FCD3447956755AE3CEDB90C48DDF1ED7904A00E6D66512C
5DCEFDDE5C390E4F89B2E86D9E2BBFD67AC3CF7CF8FAF57A98AD343DF7CD8DA1
5EAD74E1977ED15657992151BD2B9398A8D75F623DF2EC0167B723091425A512
35FB40D39231DE3D139BF19AC3240FC5F0440589DBE9B2E9F468C1B2B1D7E28C
1F834743028A65B3F62A4266E23A138E85E1AE3F68E28E30298ABB1FE7069F21
676E5416874B2F7680F6E5BC54ADDCFBE2CFE20FCFF3A832B66F160374EABC13
7BA0019E4B36B9A1B6B8B4290EEFAE438DD5DEFDA798B219F17A448AB7775C06
4022BC91A7AED22A81427B5698AED7725F46742A7199B743493423D918F99F07
0F1579774260CE0E280AE428E1612742C2898EC27A7F6820DDEB3D48D5A7E7C0
E25291274EE31F8302E8AAAC67B68B2D6AFF2E7419DEFC1647FBDD0A50D0C88D
D38429FEA7F359B7C8CFBE402C6C2B272589C6F61D91A720AA913923BD8CA9BF
274E7673759375A2D061104DF76207DE186004243532A26757023B64DCD73BE3
18C298023ABCC4C84802D76D67EBCED1C7511CE565D31DAE756429CB775E70DA
F8272291A9AAF837B0581A5438968B5B5676D51971ED0A4453F511870B2CF5BB
A31C7020EFBFB2A3825821E0154856A2A9EE79927FBFDA5579BD66E4768EDB77
89F554FB919AD708501D58583CBFB3BD9DEBC8615B0D94B38BBB00D714B38023
59FC25ADF71C1C475D9D585392617D50325C1A57C5DBCC66603EDD30F4E8F7A3
FA6E42973629C3B21DFBB4620128F6C36994533C4112B5C0673E448FB43621B9
AB160DDF9043926E6019892FD3839F4913C792816130FD6B39FCB0D545E3E4BF
73CC003E5F8CC6EC086D13025B1EA920FBEA957E946F27C112FB80D6915E7D3A
9F8F36CBBFA90B8F254ED1A91F70310684EBF56095B05C55EC926EEDBBC203B8
1F5888DAB5DA66FFF2685D389B47997F06071626029CB6B881DDBB5D31875A65
0FE43249CC21681FA429A58F78ADBA46590D977D7F3A299D7E169365B6D4AE9A
5651A188D81CC8AC00A6417EA569C1D4521DE7EDE866B26F6F0DDA8F611B2904
4638B273E2E5880D45021869572D8011683675A66D1DA9EE2034ACDD2501DF49
D198F80D5F6A01A474B6B9B40E1E8CB8A7162090BBD4AC799FA1D42CCC749F5F
AA26594270CA963639C9C79BE3BA3702151B367D0D26D375D2B79088A3C68ECB
CC7C4199B73C6555F1B8166DFB691EC9254F2C530245586C10BD33439C5AD592
A38A1C52D1E652FF8BC018D77E4AAEF58431A97E237F49F1241E68AB6CFE091E
5771DD3325E12F0E5B6CED089401871C26C7DD34E1AE0A5E9470D9513485FB3A
58CE69DA0CF4731E0D11BABCDDE28093C8C9A0649C4CFACBFE82A66AE07436EA
ECD2E23CF8832BA7908529C1B7190F4841B5D33BD0082C5B12D3F1AA8F7A3535
B3F3991513F1488FCCEFA58DD1A6225F777EA9AED7DBC2B2F72F6D19FA0CE3A1
F25468BD7761392E08EA4E6A57556C2367F9065B490216B6CEE7BA96A41D8EAC
E94A7A11B4B894CCEB9F2F4AACC1C1B0166E596CF561EE336ECE65D273AA21EA
1687C54002B2DCBB76942F7037A53ECCB5702C2E6876785CA937E0D8B9A9AC22
E94AB5EC5FF16284631701207E06B1DA0229CA8C575417613EE2326791684FE5
E80166F483EA30519C4BA3D4DD9AD8A3E4F85BC050A2CCD646C2EAD1BDE92DE5
459A335BB101FB94A29759513CA4E97FC3B25B9E91D45611C85229387B6D92A2
7D10A023F5BD4FAFF685DB6356226E252666F425DB81571C42D1CA959B09CDD3
A3F20088AB692132B277D0C25F5C3AB68110F62554A8180A00439A5FC9C97613
73B77E98621B78C7EC7DE6477E3370D5817EFF63D9D220D9CD208CD8CD3D2DEE
15AEC244F309C9D6F06C9821F71C1FC5C91EFAD18A15003574A1108D26A3E1A8
40F11F0B23CD62872D88CB0E2B85E91408CA914644FB29CB288BED3EE16F89F8
7772CEB958E619FBE3D4D2F7097B3754D47561AB741ACC9E3781B57CA46CD4BC
53B7916E4E1B88AA0EB8F6748F454E61FCCF73E591BCA088E080AA2C3501572D
BD9D6B0C93C0B359EA0DFDAF9C017F79864462D6C6028A0AF166438CC4CA1793
BE9FAD9080603EB09B2E7683FD73231B512795E58B6CB930CBADFA11CB25AAC1
B622802B9D505CA94AD532075EEF0CEB949F7DE9B3B77310717EDE3F2CF75A1A
0220E9C6E458C82395ED73DF86F253186228F9420ED72FFE3DFB24004666BA2A
BD6E9FE61DD193D9486BBFC77B9D10B88EB8CBA1983BC4BD35AEB4571B15E68F
33C7E7A0DF68B0F7A24C72DB9F1A54879C3D327FAD8FCBE746C1413F02A824BF
CCDB8B1157A1E68B5E9AE63F1483DA1F75F3A48F955A9054AE959E84FEC245A1
4C9F57392DCAAAD11F1057F95EC262C49206269C7C04B7F5CDFCC99653E4AE9D
F3AABCB4D4D40F80BCE763C2D719E144BADD850FA0B28D50F17877C28C903D48
6260BA904886B2FB4FAD0579A9A34A50EC97B4B385F9F289700A064A4701319D
6B01FC4055FFA81B4FFF39A8A9BE013588E2A32BDB71ADFDAE3A2E3B3AF48BCE
74FFCEF39F2BACBDDE68F4BB1F3103836C9915D2A618488AA30D819BAF996F20
660F667343A2D1FEBC6FF745547ABA8A53E97F7993D7D7E13459B85C5A9EE068
2F732E88C27ACC4327F277C77B74B23774B888AD114B21656670C414F25535F4
0520C9897C741854072724091C33B0AB9894A9B41E2E4E793E021652EA9AE803
296A4463BFD9E72EB80B6695E2A104974CFFA843DEC907C7A1BB936DEF53F852
2F9533E1578037573A081AE257D2FE46B972BAD31753E13E03D764FFBF435950
0EE41D19B04AF2E6228EC9E0E72554FBDF814A453FE227E8F5D4BB5096EF9493
FE1513D2804B2988918F1967AA68773C95ACF0C006403E4C2C1C11F1E12D6995
E01A9DF5311FA76845FD31715A6F3A9D189BBF397E3C7A38E569E0DD8DFA8628
84B0E231372A6F0D1F09757F408EC9E3F48066E39DC4E7C036C6F0A6F553DA90
A63B1FE09C3A3031BF051CD3F5BC32979FF08749B6BAAAB91EA0BE7BF3C50E8F
DBBE4A24AD1CB3863170BCA7CC6AD3DE1C98AB865DBA71DE37ED2275C7B7C7C7
7D1DECC77F90C2D0CCECE81DD798E2C2BCDCD365B451B0FE6B404CB2BB8468D7
32A5F9F2EB10B5B4502CB0A6C51053D296807F22E1DC205E2FBF49E654BB640E
607199713F79434E92432039584AEB24B8E9266C84AC526826944A70A34D3F97
3E74770E3A2E96EE7514804649077FF5ED637896AA6A7E67F4A6E8FF53F3A48A
46BEE467965AF9A1AAEDE64C7B2C6B595EAD5A6649CBC5BFB36AB5EDFB27083C
6AE52F962E63B6D9301C123D6F3C3493BEA0A6EC4021CDA95E63A83E49E221AE
3A47D6ED5A97BABE2D26A3FE3799BB32EEC2E76F77398AD69532B7729B25480D
3630246034831E57346FDFFE9194895C321492761A58E667E1F7ECBE9172E1DC
A7F1FFEA417A55A9B56E5C0189CE3DE92FEBC42820BB8EB23B578767B2F2813B
087D256CCF35FD4F3C070A0D9217E6872F94414BC8E9D1E0DBEC327ADD2DC1E4
BE37FE9CF2F7BFAF43AC2F48CEC372A4B54DDCB2D99A32B77DAB0561D2024AF0
69A7785CA2C80782B3357B6BBE17266CC3FC06B2A56CDDCF87F95DDDFA814A41
90DC55F004C41AC1355E2B91364F539650F08AB0280C0E01296A4C3B8DB16505
5241CB4B92F8174C4175F7FFF112294B2C9459E6DEFA83CCE4E6E7F6C42EAB4C
1A4101C7803703C242D0AE7123AF72D53C5A617BA94374824E3E816480604C64
50CFB7C0B309AC09FE3A76184A747678BEFF3C5C0318BEDA6D646FF4F40E263D
604E53091F7B3972794A9BF4B34D2042C10673E689DDC3AC1EAF76D63B63BB9A
2C5EFA65FDF361AD3535B88050F7BBD8C716E85F956A523B29EED6C6B08BC862
89F6D762CFD41CE50E96020364D07E711B7A806344887EC17A5DC89B2039B88D
DEAB014E3D94010F34EC614ACEFBBBF49C37C52DFD5B99DF89DB78A91E400957
B7C149A3B23002FF2C082DC27BE4DACAC07981191F8B6F4758ED6BD81A4ACEF7
22370EA7898DBD9342147D9E134FBB21D4E9A28AB2803B091496E53F045C2C01
C8FCA42D160EE06B57951A04CF792839485ACEEDDF0B22210FC5F203EEB20290
2929B7DDB65A5D2014A73194B4130880F161346CA44585F1C8C78FFF51B03997
CA24322ABC2E691A33EB1E3ED0D35B9C8DE312E001CCE5618314DEC55A0EC226
9F141357ADF1E929F3FB71732F5DBF8DF30E93B256CE7D7030A9EFE3F2AF6B14
5CCC09646E6D474312289EAC5B98F6CE6DB1FB6DFD0C1B2C953E75DE8FA6D793
BA5F99FDCF37DC73243EAC8F6808352F425EE812C83BC2DF1ECF472D1FBDEE85
94040A346B1259CA38A1CA5C7C2A1152AC33B15ACC167982250B2DB0E2E58D71
D902EB61C2AB2EF5ED8897772154A60FB695165000B4DAA8391D8A710AC77C10
C393C92924FE773607460290305B6835D4FF4ABD2AAAF33D81FF9D1E9634757E
17BBD8F88CDCC1016A8BB5694ABEC51C06401504F352F1C6CCE8C4FBACD6D47D
99FC3EE3CD9F5BA711470F680E9138A5B4F5637DF0896A2E33EB02FCE74E0507
83FD5C6EB6B0551CFDEB8C7669AB370FDF9F4C3A719F3B31D3B2F4E6C4AE105B
5772663AF3E4D41972D4AFEFA9E26F0FDBF6290D843E6122752D5126108E8030
70A9F0EC42ED1A675F53475DDD876CC8EEBF85C96BFE88562DDCE07B6EF4ECE9
901B3767ED5AF6EA8E5382F229D83530AD18678239AA8D81A6C34D5C60EF4236
AE14BC3EF327CE8355D429ECE63A991D8C7E3B4C970795589F165F6C9F462419
F4B3472058B7FF166C507B492E48BC35059A2BDB5327ACB87A26CB8307D315F2
4B080AC7969AF07AC83A6EEF60CE6FFB5F851464CAE253A0AB0D176281030E2D
84FEFC7F14F1403CE1C0E8589CC4E06DB3BEE723D4AE061AFAE7C880995FAD62
58F027C9C1BB4D21CAB60DDD501DB0EECD81C77FABCA078670085553733C6632
31DAB53E5A2230B4673692A33EE1F0FF2A5889EFD96115DF9657638FB69CE5FE
C9062FBB548937A36532CC94253254D1ABF04C441CC3A45365F4A30A6D0A050B
602F20516D6A8C112049784A444B9890E6A7259267E74C522F5F4EA480F10103
DF3B8B0BA626B7C9275B7F7D4E26444A543ECBA2A3911DE756893EC83C7019BD
22233D996670EAED37297DE688B9F6CADAE698A435953299EA3CDB6AAAEA82A7
D9A75DBB7AEE41F0E4D9EB8CC5B36A8BC60B56720747B2B1EDDE16806868C51C
A447540A914475860F12FE2A908E23E6C11A20D358486F4B9DD9448DE06D775B
6313A043743C2C709020A9791C8F4761DF53BC79F6CCC5775B492AA28B4414BF
2D1402F9AD78E6E66970774FACACCA83EC6922191A27B52346A935BEAAD2F07D
A0B2DE88341E915F3BA2B8CF0B8E190214AAC603E0E3900BF74341FE5D025728
16E092A3A2CBC5601A9BB69F6012F20B0D5EF70270B40DB2AA9B9F06255B6161
6C5F21F1DC35648B1440B055D3C826B81FE8D9E39D603B0E8776C0FFE951043D
85358B16F6F82000921E87286C9B2C1437E217B814860157B3FB7E5D168A8774
5E01D94A84D74B7E6C24C7FCFCE96CAC66FFFA0F1795CC168F8D1B825FFA0EB4
F61A8AAA489208C4C895F67EC705F0EA8B7BFF2970B1ED256FF1689F2E2763D8
19A4B974184EF9859B35E585B83730166BD51107CFFBD52D55117EF3D8FA0EDC
B97419350C616AB019E418B9D17328E842A71A610F3C4DFF8A15A98059430CFC
B498F1AD23167951D1DC41E32728FAB02F89B429212C58865861B641319F227A
ECB4CF2BE8EA478E9CED6E992F3DADF1348F3BCFBA2EEC60D20EEE96B0CD0DF3
EB7AB07B72016500DD7843BB5285F24E3EA192E244F199028F77C05D996CD722
1BEF04BFFC93742592D77DAA52522B4EE812490DFFFCE43E30F76B38D47E6296
1F8197D12E66F9BAC53507B9D8E16E611F27350C8683751E7094BFC9E034F964
9EC66D3E08FF9017D3AF56AA91EE86140797203C142323DF93E1FBF773389321
93B02E71C46675D63215C45BAC49038F6838D2BDF8E69A01A04DEB0C1E2386A8
5812E214649BB67EFFB6D3A5D5DE8052DB2E4F8049ECE0033E6BD0C2207F513A
FAA873FDCBCD2287F44AF3EFCC4F14623CBF681BE43F85EF8F547731EDDE2A91
D66EA3DF686820862EBE100F66D4230BB98D2190912B6279B9706BB96C75B1B4
664060183C5797259CCD59C5C8C1634602448A318AC522DBD8634F69367E923E
71CA1CA61CB689FBC825C15447EB6853F5DF26E488A1F4D2CB4FAD1568FABEA9
CCCB8DB6DEB322DF31EC80604B061412C3D36C4FC2727CF5327092B0A343D8FC
F409C18E3C64077DED2B5D01A839C4B0C0FCE9688FAD672B10B495EAAF2F09AB
20F205B7C32584B2F10B1B4841CDD459620EBC3EEE7E6E2D32A395C092CFB080
37453256B239C0A3C1A26936874B4C9F686F7FBCF9B92EA84323F5E57554E732
F1524C73258D65494A2980AA2BA9DD8B49210F6B7F04C3E51A5892DDFBFB2B91
69C6805A654511BB94446615226D34EE6C5790B557DBDF2A08D2172E1F008D8D
CEC54F5608F3C87D1B513888D1AACA3B613B94F580706AD46E608170FA10FB5F
CF641B57BFF1126316C4CAE6E4C3A453F83CADD436D99F028BE99EC7D28A4F29
4D43AE8631336879EDAAD031C05B2920CA8BE7277024B5762532C341BA3F678A
73940FC9002478AA31E424B1F3E262CA4601A450039E1DFE89B896CFBDF25C94
2FD25E13F1DD64219B9AB5213183843410D3356932206064D7C85EF235162DBE
A65FE5B8B5AAF1987A903E445D63C8A3D1513A881C4C3345772B6C50422EC7C0
12D5BBED9B8D43A74F5112F10E8CBA07B03B5347B48F0AA098831D643EADD492
E261DFFDD837E517301D1D039EAF34A2B13634F5FD25A84AEB2D30A0373198F3
37033B0E7C02C6473DB912EDE7A8E0BE1AE166AC0016DF152284434407FF62D2
3B74AD2B06682CDC1BCCAD6A5FA404480747DA99EE1C95610977AB1DDDB0E7AE
19A60AC0E07976A2DE22B2C8B24536C52208F3DD57162F77D214E6BE97FA549B
E210271FCB177CA7B2E927229B581D9E3F6ACA6491D3A11EF81C7E693A2418D8
1390FA63D542DAF4521387FACA2AB746EF441414788627DB0D25AC9321D50ADD
7867E1099642450635A0936A7F8E978558F576F91CA93B83EBBEA217EB2A2FE6
A96D8A269698A4F54E57240396FCD5212B33BB5864FA75C3A6309190E9154A29
56C5F3ED91D0C16C1069020F4BC893E6834213FE8C01A096351EE9047A37DC05
239B051815817828E6EDC8C114E9E6222D596F1617B582FB31534046A1CAC170
145D2EC67349FC377324D320C197BB1F2005D284B8CEBD6780FE63FAEDAD14FC
DEA3176C0563411295C81DC9EEB9AFB4D0C792F043CCD8CB3E41BC944BBE8705
1EE44F04119EDAA8D84D129A9AAB3D50357105D69FB1B4B788BE82AEBD13B69C
13F4A5FDBF961A729DC47ECE652426FFE54B6D7C8C1C7C8C882D982745BE00D5
8CFC32379D2085A3871CA4437799C4C9F6F0A4E7E1622BED6FF0ECF2A21550C9
D7AE64A0BBC6536C147BE7B92AA5F82358176C39E5FB8E9FE9C233306F520245
48D6732B301F1565D86CB46B7B50243651C92123F674C0AF020A32FF495F7F0F
8F5524AA6FC1B1A1499C053C122484FC0A2B0E0D61C297248E79140FBE7054E4
E19C928CF4046EC35AD4CB56B2886AE01E6503E0750250CD54C97272F4CE32C9
01047749FC323019A45BCA3D2DFA47D1CE0522771334DD3F1DC724295E5CDFFA
DD88E8DB742DCEA8653D64E09E67E5C7267CDD04EF80286919F523938BDC89B9
73BAE8DEF9BB28F423A4FE03731E808D8D35618E9CC22ECC4B756A4E413635BD
7B16FCFB51D3FBC0B16D27322A9EC4C916BD576CBEF31A815B3CD891A4CB4DA0
9368BDCCB0A7CEBFE25C76EA051AFBC453FB00CC184CAD9BB93879AA3600BB3E
44DD4D05E7184153C828E0ED3CA5E56BDA9A0EFDFD528879B5743B43AB2F0587
C62673F427DCDACD39F64961259E2D8778FDACC87E77E465F0593B28CD70069E
7526ECE604AF02D436C0C31E9E5967A66081B9F96E2903827B492E84535BE8C1
64F3F29F077CA942AA371355CF882709A105C0AA471CCDB51B746435A0833AA4
ADF97164415FA1A0B820E905B394966AD20A9026AC39449F72689D8AE688B524
A0E8353B83464D8FBBDD440391214F8B0D25E6DB7E29E80360104E06F149BC25
229330083608217316C5D70A15540B68217B6D7F560DDDF594CDFBD76AC252BA
804BA60C779B39D802C0B03D9475FBCC58D7AA4726CA7039A092F4C839FADE99
B2D9634AD2170BDFF1E70DE17BB4313762F37D2BA89D1A55F022C09F28E60A62
3BBDFAF19D6F72EA77B48661CBD616D2477AFA595EACD72970AA2963811C53D1
168D18FCB67B4CB7BB34B442AF5382FE722B89E1F8E6DEE2B5DC164679508D15
D3BFD160DFAFDE862144E0FFF2038529238342C32A4B1D423AD2EBFE8849A287
65CB50B25B0550C78E242CE238060C90C49705102E11D0350D2A1B3613922330
AB3E45FFC589C9018B755C81C46A6A72435D438A7F79EB39E4CA6EAB83B09587
8B125F0776300DC019FEB46C3C0BF0D468613794C24AC055053063E6F784C97D
766D6B1AEFA87742AAD7D28CA8BB639F19034256FDB2560AD582DB1537D2D998
AE4F013C743119ACED74718CCB3F17E162E76EE1D6E22750E92BB39246B52C1E
607503374A22EFE68143908204BC06B7D84EA76C76257D8FAEBF90AD0AA47A59
C5DDBCE5DA561F43B0033C0CBEAFD587841BBD926E0C99EE92A9F0C9884E237E
51A89E20C29BA425B3B1D078C3E6CE58D9397D61982CD2C58B27AFE7BAD1621A
FFC737ED6786BD715368D3BD00E8F58A7B0DF6C6E3B923176760DF3EB2BAE148
04124ED1B8996F9994C792F88762F57CAF7B15FAAC3A13E7C08340FDE99D2DE9
3ED56FA5A7A64D26B611891D42A4501443B9E77B4A1CF3269FCEE45C6280494E
BA058544FE2DB450BACF9C68402E951A0C5A42980F7759D71411BE32EB04CE20
FFB4AA345425AF75DB63B1A815EAC42AA2126FA77D20DD1F8451F1A0B1BCEFF5
C2FC3F69E252AFEC9DE6C522434880F6070A786CCE7109265E50DE298B004B22
9AAD1BABBB77E99A47D964F8498553CAA5962207549827783E9541D53E2E7AD9
FC57896804708548B751F857A04FFA6B83F83B4BB48084CA316BC68B0BC05450
75055897B133FD3458B24B2270071A6391E24DE9DCB8D4AC4A63BC6A5FAE1F8F
869DE61C0838CEFBCDC176C2AF2242A06636930F0831CDA261F2756E6934596D
1ED1A044BF907D09A335837273E8FCF0AAFEC9B666B4EE822F73E8106B79B988
7C3D4D8E1B663829C069443DAF7E62600AA8D4692238DFA0F3F4EB0EB9F6D68A
623D4824D2BD58F6090DF647C792F25B76F8247E128A8AEF18CF3370462D2C10
D3674F72A1AB1FAD876281D8B3A5C20D87B7920B331145C60F3A648D5ACFCF7E
AA6DDFC6EA88A8D2C91CB68BDA7CA236C5761DDAB3B2D3CC85DB8595568352DD
0D09D14E73D42A1E4CCB79E0C8C433669D0F3B85748693E183549FBAAA48544F
1251DA25DB3194425CB1B51D457AE09BC16BF50D1BFE9456B30A6056497FD3A5
3C14A5495FFD717AB91E2A9E59A773CBCE754A669B4B22CCB1469EAD1510B5E3
DDACE3B3694E0AE54B0A38F752D12DA020910E7169B8F758A993C7CF61EF9B11
88F1D4E3FCA8734B3AEBF897432933F6C5D7536161AA84F11CD32F444FA972DB
6479EAB5961E5D0E3FA370E06B8992A7B88915ACB52ADCA5383700FFB1037EA0
9E48B11B5F15B3BE7629A912309033461FE382CC2FB4B131DAAE17CFBB4F33B7
4105670A9C7E84E47CA70CB5D1DD87F24F66C3477F7D2E4BF7932C946BD558B2
D04D70E700C91297A67359108C37A6CEEB8BBE1A0E8B639DCE7B93D741CF8E47
1FC3D97035A792938D2969F1DF99CB73E0F2B67C2AD3384B9116CDEFF7FEA853
F94CDE2E807240E32E4D1D1D6821999D1E7AC5E409579A3F8D35F5CADCA7B7B5
3A601EE6C22D509F10F85B3BB1157628830CC91C8648F56862F887D92B92E632
20C18A9BD97E426AA9F79B01A50F0E87E958B7847EBAC54F766B5FADE4758823
82AFD57165EAC94E131114D822BD855D3188B370AF467240B453DD98CBA65379
21AC58C884467529EFADE8AF464E65ADAFF4A2CAC42927C02C909F24AE717A08
B02FF01BF22820AA336C17DDDA6E1E38F77AD8E5486E963AC56E681ECC7027E4
AFA02DC45518AE3D40CE5FDC2011A85D6929C00E3A58B0AC6D297CF252D91CC4
C197F2912C9FD912F6A02C51974B09A44DDA2F010A908DFFD3A86599103B421B
92344B37B7C59760B1F17B61ADD54469A5FB26B3828EFADB385CA462A901055E
B2593895883B1906CC3B21BB90929E80EA0A4575CB32B4E94FE031B3556A9E9C
90F7012F362E6DC2E5FA574E366578244047EE0B0AA558EA5B8D39E85F301182
BB71C0B780D2871DBFC606C8912929601A753D6B28721AE1E556DF625B24141C
7B32FEB5FD0A8270C782D80234B6EECC77D1AC50945D3C099D648F9F4A6D7603
0BD2D55860429505A8FABDDE370AF63E074EBCEB663754627ABC73B5F4409C72
865CBFED6BE8B054EAC996F313371726DC63098F6DA470A8A204F3EBA6063C45
6E519E6374ED64A33564EF84E1AA141B55D5646F71EE742115020DA3FDFDE005
6A70C16360698CD7CA06F6F6114AA27885741F13B206318E9936AC39AF51163E
84F5F565F5EF906D93B54413B0614F25EEA40ECE3EC16408B89A4868D04C38C5
98D862A405ED12D6AB49113AB800FB27708C6AAB756036587A99FD979DA482E6
34C7DC4C0705CABB7915872594D81C466244FB98EEEFBB76656C43F680949296
E69092DBAA19456FFFA2271D8AA8C4556AF547058BE6EA551CD577E6E61E9F56
5BB0731C441A2D029E6B4B0A3FC985D409583CFA1966CD879F51F24C7D3A693B
CD1290183B850577622833051BFE597E108BB14BFAC6CCB417563CA8DEF84980
2A7AA7EDC848BCFE5AB771064C5D28D0B5A57D14D86141A9DFBB7247B1981612
478B45F96630F5B7FDF17D6089987861D751D8C75351ED9B530DD3D686BE64B4
7B4FDBF49AC8834C5D297DE6E8412EB2D30C8771B7FF520C36A279AFB68D4108
D6166F31B4E805C727DF990A39140629C682DA5DEBDA2BA3F4C137C25A523202
23E52ED3A7B2875B624E8BA7821774797C95930BAD2BFD2B0D7C9ACDB07B69A0
4E066A677EF55D5E94A8104F41D92AA893BF7F203930E1358AC03AD65EAE01B0
3EA01C5BE6353B5D62838EAF7A43EF17DB5800FB2441
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A7E0C0C680F78C72CCD2D78F904C9441A98B119478D0970A67D019263A
44B1EB69C07BCB639AB145B035D7189B3EBAAB9B67B40B5015B3C6F6AE2F5DB2
228828830513322B521B6CDF1B695788371C4F539008D62FB84FD46A55964E6A
787F3D6D18476AD7ADF1BEB6C59E9FA471EC5C678282D1278CCB4BB9A6F8F38B
181D53C398593AA6A231516D0720FB06033A4C316ABB86A9EBDE3A0A2C5C28A2
70AAADE13AD5902DEA47B89141EF19B773553EE11913E5E8603A068EE101A08F
CA7D473C965957D20CA01528F4E912BAC6E9079969EFF65B08BAFAE82839FE2A
BA9D58DA3AE99D39CED34D1C3B69F8D14913A29EB09CE2AF42EE38711991F234
32B139BB8AF8666F869228965A02E7E94498BB42B25FD8D98018CB895156E59F
A698B4855DCBF3C1C199F37432666AF77B45FC1E58503A439AA8231E3B58C24C
CD0E4D1674021209C1E85C93C6037DA4F54949AFB2AB6B28133F4E0C421B5357
51251B8C76CF3ADEE4B91823DAB9D78945FBF3B865C7C6E07D5F8AFC80F3D729
2CF6410414FBAB6C13B01D220E83F5F8A0D9BA85D5C60EB1BDE5780C064789D7
0622E97DC4B417F333A71119C04E7CA6C53DCF940E99B91D0A762AA388CF2436
790C83AAEF38EA53721F9B2CCE8B674D6FEF5720DA32B5D15B6CAAEE5E8F0C19
7FA82B84CFA8A17961CC6B39A9B5B512FC619A8C70E63D9C446CF289C16C61AA
47198A0229BA6AABA5166E008DA1907F25D6D0A1508F22B165328AC69B90658F
DA353FD7FF414B2B972A1B5B182BBF2B7D6672EF95C376A911ECF5D752DBD2C0
55876FE961D884A4B2112B7B356C1A419179EB5B68E3D0F652244F3A1892C994
3FF96F9FADEF6CBABB1EC8A04B34E500A2E41CDB556821BD95BB271776C69815
FEFECDD7DA90D6A69E557F466386114F39ACCFC3FFCC684F17531FEAD1FEA18B
EBD9BE942D1D417CCC4A7ECAD3C3CB7FD53FF90CA3052C1B9D0D06001C27667E
18437A3FF5374834B2211B909402A0E2B26113AB0CBD5020B815A4262F54EEB2
9D989C349A18DBAF88F1DC0A57E3F1C97F1D9A2ACE0B55CA081FB4687EFA6855
435B9A188F105E8702602D148DA5EBC1671A75D45243C2F81DF667DC844AB42A
11FD8426215F5684EBCDC3457E8773269F202FB52913EFA4E6618B933AFD226B
6E1454F91B14172C9C62CF185ADF76DFB89264F7AEB3B82EDCC0898EF4774464
1B497C027F754BA7324CA2ED80ED1B2A784F034DB233D196BAF2872D412883F5
03E2C04DC8219229C355B445D56552CE1DAA8BB51CE82D5A1DF120172C913812
0EFE2A7E062765C827DB203F9C8A06C64FB595F406E88C6F48262874819D13B0
7FCFBEAD6AF7FDE4A90BB983563E3AF2F37F373A2C90DA9D8A559C05D32D3167
6BA63FD6B2690CBE07E0FF1D8A4BE9150680CE16FE2A5B2375847C138BA36DC9
AF58C2E5F9A96F74394F51D9BD1DDDF69DBF6A18BACB98E03E8C8DA05FF4BDE4
A39F0A1CAED7DABC72461A20BAE88BF64FBAFA025E6B118E79B5FF88BEF46B44
548D8410DB411328662BC75520E944F86F36AD7C159AA2D3CC4163BCC6B70845
E0685E046AE1B99F9B446CC9027C5D1A1A1C581638F15237DE821ACBDCFB3F3A
8FF2C3802747E6F05A3C2BCFFA4EE13AA09AECB0BF4A62BFC0ECCFC9FA86F7D5
855F62B2EE5CC707A108799E2AE09491748CA61BD233C3CCF8AD306DDF1CF89A
3C6A12B20BA8D9EA7C8C76F696B67D619042937DAD77C86AB1EE7E70D004623B
5ABC64B77895F38DC2B016D80A11B31AB5447E9AED44FD26B7462AB662DD3EFE
77B883F1F28DB2A6E08B0262DE27C092F6FC5E3FF23186E0746C4C16BC25BAA1
ABE59A482EB17E84547E0B0A27B4EF8CC7B2FEEDC01B91737C2AFD424B6FF245
E83FDE843FBB5603514E11049484B7AD3DE1A125B66645EB6E427B7F06E72100
3F1BE1EDE0D45289D5050C0C676E229A5BCB583B8FF4A15FA4C759FF9FD6C636
8E36DBE68FC9FFA9AB8D6869A03B95B45C29C007B8A1E4D6E2AC096B8C353749
4B385D5DC3CA953BB4152DC0162CF368CD77C352C3C0B52840500FD93B7741A1
E97A662DF8EC2A72F86DB46CC4E5D155B9A7185E469D9CAFE97D8A4A9A5FF963
77491B58351399FDE7758BE288B9A19C648CCB417B00C662DC557EA937157788
8D857DBBD80AFF22289D3D09BD6A92C219F9B103C7CCDACD3894B6FE35643590
7CA103C0A906E95A5E7591AEF50748C771161EB596276EF8C716B6062DEB42CD
2745B12206E6923436F0B10AF206109450D4330BD4F8460B957D4B19521941F5
F3225CA0206A81FA46FCA18E9F48E2CF71FDA0D38BB61DAEBEA7BD88D0CB784E
327F81F48E34AAFA9D2B2216DAFAE97BC2F1E560F9822D692257D8E5CB46F17E
1D714B5250791C8099F578F101A07C9FC32117A37C83E3B57FD6A0B191FAC3AA
9D5122A9FB6234D1B48063E4D11B03EB156176BC6DC28AB8F62DAB8C4ED79C38
C19C30996EB079E64F84CC7D9A2B2DDD9C65410A74346F623D9BBEF1FED43C82
F5D236E88F80F41F679AFE4623558F22684DB858B9403141BFA2FB78B50134B9
D3BFC76146B3418C7B961D7A8B9D10A0193615A09F2B8A9FF3D249A77BECE50B
7EB90F28E9FADD5FC3C072F2ACDE4688D377D499EDC27B177F7B76247E6C4342
0F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 66 /B put
dup 68 /D put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8B5BA258462B2FAEA1826B3410BA3333480CFE0DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F480B3B27932ADC486BD9CC130D94BBD05
43872FEBA04FB8866ABCB4D379696E73B84BBE98FBC4A16CFF22F8A7AF754624
2912C228030FF7EF23D51DD61BEB5171AD31E2B630475E16B6E0F3C78D44AC30
712D165DB0A5754351A6A256C059FDF12F0BC7C8A22916ACCBDAFE9470D90556
237C9637BC3A58D73BB76706647645D03183325FC2FBE33A18BD1D9C9B15DE33
E67B25A0F624C0543129A13E15D41B6032BDE2888C87E8B4785352BB5CA87584
878404BE7530ED3CBA29A24AA1ADBFBA4528C03878D674B19CA6AF07E092FB72
09C44CFE26C61007E2D0BC9C819712A1B110FDE4575D7136EFAB8F07F9C49999
3FE7FC6D26B943057CACF5B8376C62CC4BE7EF1F650FF939D5E1DA34EBDC406D
D811F1C654A183C88D63944EF6CBA66AC1D1F5E7A2030E77BD1A574A030D70A9
F608AC6D5B15B0D1EE0EEBD1B06127A7E7C35BE9E1A6F4BE1FA875D87D291B67
B342DBC2CFE5FE396979B1BA2097B49A4F12D55F0FE98AE554DCB3E2E2118533
D02E1E67C45E0C1F02BC045EE6439E164F920C9BE5D66C319380AEFA9CDB2DAE
EFE44BAC78A9E7F157C1AB8ED079373877EE8AFFAF62815C71CDFBADC05CB498
8BC354F399A74B95AF11C9DF74AAC92F8003D30398DCB833B601D47C0AEF0004
8578F685AF93C78AB4833DA90895413897173FC9CBF1572050CF5BBE35B17F3A
45D8355B9B2E4124F66D17C2A52AEA87048653D626945E51D7A6682AF04C7EA6
7A0A8E0541321D403C7085848EF48951C807C0605F44A9EEE1F46206C6EBC98E
E759472B0F6C02CE738A04FB53275F80DA71E85F2C7C7252C39028C333EC869F
F92DC425673C4225B217B8BFA38EB5EDE7B01B9A5D5A96CF476AF619D4CF07D4
B1F64248D27D24CB0E769D56823C4CAD20D6BAAE237BEA1DBB696BEFDDF6E7D3
DFADFE74D396DB2BC4CAD63473D133E2B4408BC3DDCA89410867285983DB2789
04EE642C8191A484E4EBD80883B40B13239AD8BFDAE064992A93AB12A25EEF65
BB23577920D3A960A419AC152D83CC7C256456E38E69C4679F7AE3030D00CEF4
38572D8CC8DA5C5CF01EF99F1AB377547441500D76DDED1DEF4C0EDEB57617AF
E4AF3B8EE221C41E579A4A90798AF43CCC0FE45F8A7D679D160C1B576A16A6CC
0E475847AC5C31E193B631D170A186F192C714A2FEBA83E048C4D6904260A13B
3FAD0F6C303E2E6CEED3269F7CA1DBCEC0CD44FD5C219B60DF7CB505EE5C4F97
EB0528E76A35157276C5B3CCDE37FCCD168E81B9B78EAEB20E100E7EF8F37833
EB30D8CA1FF318A817E16E884A4155153B78F519279CF0BFC34E78CBAEE6DB2D
98B119A663D8A4DA7952288D6FDFED2C108DF97213D5ECD06C4052A481258411
77107484DDD11BBBC90B7A126BBAC3AC9ACF345DF80E7026AE5546CC6DF382F3
F511CF4D55807E475DD49C99229D017AFBAFCF28A2A1512CA4EDA2D0EF065AF0
D6A373E32F903D1DA71B775F8E130E19A74AC215A34EB24CE1DBB14551E7B457
2876BA0BE60A3CBCA6CB533F340C37A11182CE9941C48FA865B3804ACC066D42
2EA072BACD7BCB1250B10D68C9AFF50C9BBAEECAE244DFC6EBA64AFC269365AB
2C60C5522AECD484922BAE296327E6A91CB834728EF3A08CA578DDDDF61B3801
94B62E21E8F149395738300954450F170555854D3152767A44689F46C43EB474
AF1A98B7F7C273B882035820725B13D4BC963B1E77FE3D14CABE0158D723BBF6
12BC8D5060E9D3189A53E43178E81F6C4160A4837F6D2B04798311669EA5FBEB
9007C3E7916373D9147A27A2F9FE5C8AB9DA5898E67C1D02E188C5C8545CABAC
CAA0BECD99C67F332E9DE05881196029CBE4B719A4EC2C0C5E09C05039F118D4
CC93243B50A90C8314D69AFE7F84FBD9760F985893F63814144C7E25DC7AAA0F
FD7DB49929F1B8FA8E9117F73EB99E6F070E48F05CF82CE78E05972641823E98
12A6F602C55BED87E449F5B93CDB25BA9078ACCD8AD8489EE51FF1F5C934C9EC
4BFCDFC84FA2CEE1A941EB7793271D43C0C3F52BFA4D2A5C2D4EEAA19810573C
EDD1490B6A83BC9CB87CC68ACFD0F372B89EDF119A4732E1E389F9F7A8CA3008
0583A77BDC82ADA7B1E7EA9AADC22144F7DDB9BA67D0C2916971C63068255A54
A5BB819E88FF8A8CEB21DFD16BDDFB013400ABC48D3855A022C1D143C793DB39
8BD327A2B1E4A571E7B2A27753422CD038CF5DB6B692FB53656875CE197A9515
51AAE57F8A1205767F6339AC3945F569D090634D8EE84501A256A0D44D0318FB
F8FBE07DFF6D54CA0555F6D2B0B3EB49BA27F26C8129BC7DAC2B2EB49D744D52
ED77887403400BB3B6F747509BFCF836CD740839C92D40F950ACEACACE96AC66
64334D3D01FA44249C0B20A3208570FFA1D0CE7D7FF0662A6193571C38E6AD5E
FEA9707B0CDD1D6F13FFCF2711FBEDBD90CC60D16889BF0E4417287B3C730A3B
CD563D01C423FAEBFFD5635347A02C0524E96788FDCB03BDA250873BC6025860
5D54D72852600181080C8D1CD3CC91A17CAA8558D2D8918FAA09E8E2BC59C418
1E9E6F86C8FA471D3521D1B747AF96F1211A70F1AF8F7BE4B7EE01654C92E523
EC0B48FB12A92B9DF9DAC3A9A66F58222A5A1929E8CCCF380B67D1BA2AB09121
B5BD0F04BA7A3A3732218D669A69A11893E92A4A63F37042D9516B9A0A771BA3
1CB3586FB28DA7D2C452B14B343E0BD0BC8E77790FCC8A509489A699D01AE5D8
5C34D29E7A430D0CBDD17AA40B30D5BCDC3CC956B910CBBD01FBA8D637C17434
DE2A919BFEE0B26187A87FB8C03E007E48D38EABE1070B70B974F20C1E1D39F4
CB6342B3A763B45285B097AF717CEA05E14FBD4D81640145AC63AF3C907B597A
53F21AAA60EB2652C39BAF155B7AE05C6258FF5B4686EF197414157E5BD09E62
A1C7C5F555A870BA40746F379153F4673CFA75D8A6EF2DFA3B2776CAD7669DFC
86572467DC1FE8C3394D9E2805479AE3A779F202AE97FE9AAC1D9EF3AA0AA379
9A89BD19F988C92C6C3BC2D58E281A67961F0EC9292F05A6F59B9D9C1FCF1AFF
9AF8A7A980FF2F4756D939F76E9A8E77E64B489D43878F25C0ED90651F2CBDE4
F642B3E07AFE8157D01721A596AB45BA48F0D6597D9E91DD99DA2CCEFD03BB50
734C2CE929605920D197DD174F4CC5BE515E7DA53AB87DDA9172DF61270E5A62
DA420C720F86E85CB13C4D58DE297F8437C97401626DF52907D562906C08BE0C
BB4C06FE87323A4FCC6F2FC5D5AFB318967E8C98F32B793A742ED522B650BDF2
0D1B1C506DF6FD665D2C1375C5E985B23697535F7128035532F9ADF443529940
60D2B94D3DD7C2DA0E59DB4C77C56600D68587B1676E0343255ADA4BC9E55E54
4F6CB9CB97278632AC86163D0D129D371A6AE8B81299CE090849E7B8EDCA5EB4
99AE7CEA454FC8D13442FADC0EB45D6259B132CAA70232032BBD9B1D3EBC7177
61B1EDC39154978CA2675518C9B37DC4C6D1986F91228C5BBE0543DDF6594FF6
15B780BAC887AE42CDB649B05D3BE0EB4A20AF7168A09A1C318348765DC1E7EA
5D6411CEF2C69CAF9952B759289F9112D7254F89572053F996B469D425EE76A5
24171898D260F699736AA58C7B3A65D90CFB5C2E6C49C7A2D32F59D6F44BBE8D
8ABE6D094CCF592A26407CDADE8D43A0C22827161AE852F22E65AF85908532DF
CA773FED319868A14E7D4575516D8A7D678E6820A93086B3AF1074C0C4FD9037
7C1ED0B3D5EB93BF51704550C8351B5E2C02588F17D46CD3934B03055982D65B
BD7FC52F84B0748B6B72DC94CE869769F743A50E5C6CC6D2939A736B37371FC5
E9AD016B9397853296720CAECA4E2BE2814FB2F856F72D82B1B0970A0A7DA972
3727AA1F3D618999234FCC3BB2E4712FACB12B3E70B7458FC09E292D2C0B7E79
688673A19B13AC110CCB8CD6477C0765940FEC19124783158D38A637594042E1
381985D090548270E397623F4D27734E9971218D52A33AABA2204E11B3BE54F8
7A8A555F4CEF267AFEFA65CCA0170624DB8B4AFE1C7BA967F4684663A1400BD5
4515827D29ECF73EE26736F72524984A04D4A33DB2D1BEB412D3AB8647D6542B
4CD02CAB6554A66E3AF572DCD3AC5D0464209B2DEA107E25B706F772E904C835
93604BD2D13B7C8DFB4F075A5806B30703BFDEF11BF19ABC29899533ED0B86CD
2F45C24A2734E1B5FFB1C3DE288E68FE69C15AF536D9E9F3AA5FF2F5344EF78D
1693A39E769DF23C1D0745DC93C2A369202BD5FF0215BDC29DB66130670FCC09
4E15D1DF1811FF13D4CAB5DBDB53C824E57B1CD1DE707ADDA237A0A61025253B
01479C03DA4CFE64C514F4AFE4DEB9CE24DDE9E786369551B9875539F4B092D3
1FC7AF4CAD51809C19E155088DF8BD36BFC427BB5DFB3E775E176C7C44F916A0
2C9CDD4C807DAF9F2E8D18ED5D58B1A62DA6A1B24A6EC53F323F9E69EA345FB0
B1BF9547B0B0BA794565AC14D490A558E71BEEDF6DC44966DBEFB160D75ED622
7797381A895AA30FCCE5CADD542F25ECF19BEB39D2AA88F4423591664EF03392
266528C999F97221CD1F6855AF7B2802D65F50ADDA432FB89B70D05540C6E2F3
ECD8812AB423F34E1808E5A906635AA95C5A501DD1636A2EF92A2DD4295C7099
D2C34745DF2E81052BF734B11111823A98ED075541D65842E995C0285A3BA076
09DD6C6B5A5B8C6CD228E16ACAACE624C9281E4951F4778B10B7A1AF2659234A
3CDD1337F19EF388D2A29059D863C744021EFF19B483459BBB1205D36C87CBD3
528742A735D23B52509A5837976FEAA57789AD8BB215640D3CE942ACDF551426
31130CFEBAC05AAE92CDE39741C4858C8789F1B1D4917AD936FB9378C4046DF7
5F1BC0D2FF3B209E560196D3A6B197B19A3F1128096FE3CF4EF0F7586F0FC7FF
D8C94DE85E63F2AF356DEBC9B88D869198674E85DF06DC4F867EFA769784B383
5A6E759964A1F20A7ABEF70381377010E9EE104290DFC2F9285AC60D630F6275
F8B21C841EB42315A287775CE336DE14C6E6DCA684512024741C937BACB6DBF4
D22A0630F59DD8DE8F00D4237CD27B8F06C3E3B5950D1B67F31D785296465BFB
798D8EC283BAADCF468DD9C9141A68F2A10CA947A7998D002A7BD60D1171CED2
DE81FAEA502AC75A02901A766CDF3FF4DAB8EC1D117EFD9ABDD2F615A53469AE
E2BD66C02FACC9D5516485B9A56927483F4F8394C823A7B476BFC1F79E6F2FBB
A2070A8CE6EFDF101F458A4D63FD628963648F9821F96B9473D908465A2164DF
D86207C6DF1B557F7F657A630B38D3B6BB1E787008260EA12083C99654F72C57
27C8653C1A4980E589FE54A9F155B0ED261C3CE14538C0AFF81557F9C43CDCDF
2E413E33229AA2E2018F9E19069D3A402BE21870C2611E89A381007A44461295
2FDAF2D9E5F429C477EFA60DD752F48062C6B5C0B4787472FB03EC9E4631CFF2
E54A436A175A546494B745FEFCDDD4780BB46CC9D4C8D47E030F3E6BBC31BABE
821209AD0331E96D8FEEB42DD05C4E54E93F156900206DEC36F267FB994A55CA
A974A2F7C9A73D1A5295BB56A33C5F2A447087A75F71ED5E492CF609AFC53CB9
6390D6303D7F8808FC568DDBE7713407862F42A8A2F1AFC6FDFB0B7080E29D51
4711A67B44C87FD84C6B585FDFDDBC149BBDDA826A9479816426378F035BDD07
9DBDA758EBA405E5DD87F279E034F1E98F1B59F550B9AD1ECA89BA460D107D16
E221ECFBF9771C7DE4D30DDFF45337EFD74D7474E359F6924C38DC3E801D14AE
DF6CA4E75BC65A57B009E6423F526E30C2529EEE62C7039FF7CC8377DDB81EAA
AD265090B82E14AED5631FFA14CF1B5D2DED3C31AE91152D76DE9D3749B4DA9F
955FFE3113731424A4ACFA9B91E6541C87D60D8C69B3BCDB98DBA8BEFED0A6CC
81A4D72814E1B1D01F5A25C0092DDB6E90B765CB289FBAAE86C4C82FAB3301C4
693FA1D0E7CC8CE8143D47CF17CFA6A19FEDBEC782AE5B29D62A048C91FC3ACE
83474BD295C27D6B1C7244806C9B31B7D39C2761703FA45D05AE827DEC86AB98
B0A9D4443206E2DBB0C18DF44C8A26D1EF699FB8FC9687FAE7142BAA631DD336
EEC6D8639C03C7E5A6BB00A92D582314815F277833FC37FADDB3278A2D8B0034
8287FF3AD805AA74F655CE86F241759F40EC6093316A449998030CB66680AAD6
B141E6F978195B5A25ECD3A1DA30BD492CE7B64B09959AD5A5F913D9AB3C5C61
84276B12ABDB92130B23BE25D02B70537DE13CF85B9C21689346692AE0F1480B
7CF6EF9C5A8E9E80CBF8371CE0C95CE96BAE1CBB58476844E12C0AB105C53757
B00834164C3767A11AF29E3A452A44C345F5F5F318A8D6AC3FF4302628BF6D8B
2F6E11E70B15EAE5A4E995B956493ECE61ACAC240D00C56B990225906127EBBE
72A5A6F1EA4C26083F52B960E9A39816FD14679E926234CB7B2D75D7337E065B
7591C2DC2AA154DF5BFC6EFBEFF6FE4D2A8332AAA22CD1ECCE3511A65F997C06
610B37A644C9C90B053C6695E15F0A94B2227816E3F6B4BC552C321074B06527
EF779AF9B0CFB76A0BD448DA793DF144762A74DEDDBBE8A9F7205AFADFA20B52
A91D50FCC48FDF7DCD5931CACE9F65D3315327F67253F10DABCAD8134453859A
26C6A44D0C7F440B27C7C240881282CD4B7DECE7E8D739
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 39 /quoteright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 89 /Y put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DE884C96BB923B1EC8208BD7DCEAB0FC2293629
2AA1F72C6B470701C381E335C2364CFCEBACDD20CA36182CA7E70AFF5B14B02B
75CBD0738E35DAD8E60CB3DA4DDED557FF9ED386DA52D10615E700751C842FBC
85D89C0E713F556814E051C6CEFE7E83C2F379B88A801DDA565BE73013DD56D9
44D97798564787AE6D5A6A9FB777EEB850C7481B4A353EB9279731512C9B95D3
2ACA3A0D44585E55AFD968135F6492A9381FA2D126CF50373AB7D47B509AE6F5
C4B100BE8334ABE2268DAFB7983BF339540A8D8280F3576CDCD4F21408AA7D95
D50A7C1599E62D4FCAB001D5F9DA84FA530B88F2FE36B36F9968B5CF9FDBFA11
DCA0E08D087C4C5F4D744BFBA60FC22E964CE10AF512C228F4CFC3DB21E38CFE
AC11748F9B23F33426BC4AE3F026AA8178364703A31FFB8A31AB6328AA3B891E
A9410A536479A9A0378B1CE62E0205B073A9C3F004DB440C37234EC8C030E18A
42C47DD0FA1EE3521C98714EC451AB5E544183431A9C5254CA9A7F73A55B8B5D
A98941739E254A5DD0C519CDB28B2F4B9E4850788B0B46E26020DA98EE4E7AA3
9B55089D13329ACB496C86999B89ACF2099533DE1756F0248149468CC0F2C45A
CA7E24A4C93B99FB57A66912299D28DC5EA30C0D4DB0F6CDF4F8F910454D37E2
35E519763C2B61D2B1E6C3DE314A739F6DDBB748D0C6443D23FDFB6D6B162BE3
95DFA7EADEF780AF4D3EACFF2C28AB8FD4530E353E5270D5FA6599BA4CEECD08
BED2831AD39F1E8794319569D09632A4CD65FE1A20DE8FB18109D0F8B7EAE4F5
4715EACD45673984D60AF1EE8E6C93C4F789008648C1F96FA1F8B338EE47E2A2
2305B46D033B7C7A3E634072E1CE2711938D605AAC075BB8E678C339F7B42198
3E61AE2035C3829B1CEC2E9FBCD62C20CB0AE0607EE97E5A017628A9A8A5208E
BECACFDB8FEF5911988ACCD63572FFEE5C40A2025F26C24EC2A87A2745B3933F
41FB3EE69503CAE324705BE07519A307A6530BBD233F45464221B371CAEE0B23
787A20271277CA65E106143B0081D25E339919166E4C5685DB230CEBD600CD33
AEAD858BB6A43A41D38BF43D98B497587D795459121253EE898FCCBC2CEB4D2B
531BC917318A8EB11C4114060FADB071C8A822086E9A298740B5B09C8A925A3C
025767C0809544F529194EFEA0BD4DABA9BC0A35CC61054AD4CFF4EF6F6BACAB
56341055BBD2158D69568152561B8E8412C0F1034FB773AA050B8CCB23F49CCC
822F363B335D65A4D2B4D5AAC193EC41760DDEA9B218FB1969747968A767404F
D705B45223A6504CA4D48826FAE6756223F2FF5B53D73FE9678ACA19ABFFCD5B
59A380CC4084CF47BACF0C62164110F3599D8E6CB9E93D141668D361EB443AC8
0C0E83A3C7BD7646FCB6C28886EC210A1F84DB2461B673EFFDF8F0815D7853C6
F61278341A101828638960F2479000AD48A72EFA7FD1AC7044A40106216CAF4D
94EF709930ECA646B2F07D8358D48D0A768B6E6E0FCF3BFA597ACB9868737697
95F45C48945BF8CD5B0533A7673D9CEDB177A43541D7D09EC95204F5D53FDB09
DCC0036BC505B14FBBA68889E25444BFBAE4942F657F9D97DBFD591A23CFC73E
FC3F8EBE9754C29374D76DA1237A4FC26F3084909D712F005FA8B12F332098A5
5EDF16A009E3EDE0472C227802A5BF4C9235E2F15364F94D427B98B29EBD0CD4
D2B13228DED6A482790970C5959847B05B63CE0F9832AEECA62FEC8B3D66226A
033A26A8A6BE22F97E638C97949EAB8569BDA2BCBBEE4B7C2CE47E76813245A8
27F924503A391DA967A6E2565525EA6E0C97812C2B93C26287A77803FBE43034
4E37F91B322CBE721194CBB31D5E28355D8777C76AF239DF8E811FA5D5AD64BE
3416E790D187BA0098C6EBB1AD2C0A07CD6C732FE2BA1F6ADB2A9525EF8B88F8
6873247CA80C0DE08472528D0F37871075540738211252B2972BA2E546CF5553
6EA2B897055AE2972F75FA7E60FD833405ED5A4125600C63939DC6B4FA9E351E
A4891D431B7C6D13BFC785759F33F75D95247EC6B58B122524701CF92DC3BD8B
C20034D0663C61BF4230A0B7B2D3B3A68B3EC6EF438FFB82C0AF127322C3A4A1
DFC219DB05CF529A5DB0A156F9B779EFB34F4DFEBEC110F86FE30DEB3091C42F
7AC43048A8050E79A5CC21229594103CC4CEFC65B9969DBF637B351B73BD757E
71985920DE16C008FB774FBD896843C02A163DEAC4B6BA52A7CDDBB71EA7817D
5D7C4A3404EA48CF8E163ECC9A261574955515BB958D3986BF1896368D9C6AF1
F54A8549153D33CC68390F577514F3CE3EB6CF5FD7B6ECEED472B2C2B85B60A4
D758B0D7A29C74A59723D8FD179F8CF56E6249F3CD07047D95B0B79F9FD4E36D
E79DE96F9A1D0F464B0CB8B5EADD6297E9CA7EEF5E988114B4AC5E6D4AC8A5E3
93CA447417A11CC98A119940273C61C1FE61719E1D3195F0CA3391B9D345EF77
A5BB17D929790FDD2920EC7FB0356A04A9C2605212078AB6169116E0B71E4D77
E58616B182A22C8D118F3CF7AB1ED64459B58055842AD7D2D98A5498E604B980
E2FFFB47BAFBF92202F1EAF90229068FC2081EF9B41AC9702666E5B9DDFEF06D
2A39812118560E0F93C7C4AD5B083D1D6DEC84D098A70D15F48C2F61F7D1DDE2
0B3E02C49D9FAB9119AC53336AB6A85626FD09C0DA1E332BE2CCE6F4A360A33A
473E6D6358DB8600D7C4E7F5EC4DF6A1E6BDF661729B458A0FE66EC27CBD74FC
33F45A8D76F4B9E4DAA7AADB7F98043BBCB6F7CF1E407FAC73EE186855A3FE4D
9C0A610AA270C0342BAE5045E10792E4096DCC5B20B6726F0B38E30C5F8FC4FE
F67A892CD156EC555049252B35E9614CDCB0B51A9C990A17DB0EDF2AF876320E
9F705D2CF3A621DE1DFADC91727EBB2E7B939476ACAAF57E174E7CD4A7D383F6
95C47858736CFF8B5152BE94367DDACAF138E144086564C814FDDD326DE8C95B
2FA77B0BD3FF425821DAAABE972F112CDC7DC857E47F1B8BE54997E3BBA491F4
6F02D1004CB3FA9205A17BD54BE090800C5312D5FF7B893CC31F79492DC28987
DCE13E8A38731EA5CCE9772C554CDB77B0F15E93A3718E0B48FFE450E1CD2F0F
1496273E0F702A356F20754419FD2669679DAA3AB5C67FE75ABBACCE69775DA6
C5B6B9CA35221447A44807B5D86DFA4D49ACD662A67ADD8D5D4EC829276383B7
D71C07C06F3A5AA5803062CA6D4D1CB277BE9F492E4D13434852A58A1E116658
83C47DAA9AC2B8D47CF6F39724098ACB22EB1DCB1C9FE66BA3E83FC0004372B3
87CE01D77F72FA91FC563E3BFB001A0762D806F8F5A1C1D17390BBD325720E21
956A2E033606A5233CF74DCB702183E01EC47299C59649CC759617E70D5FB9C3
C84F1D2767BD0D84AC3E5225B2CB14915483192E0C7F0B0891138F528B037CD1
5D2EB918EDE7346738CC89DC5AD2AF3C1BC94BBE8E15F7CB23170D962BCF516D
057801F243B335B5B97534BA96D46BBD8F7B95A7BA3E055DD106CEC2709BABD6
9BA97FB0D25484E384BD44A23F67673A8DDF2975B176BB4B3F82782A7682BE8D
D679777C3D492BEE05E16B7AED577614F4AC37E8983FF25130188AC01DFC10A5
D5010758C64EFF20D9FBBE18E396CC771007E5882F40863EF17C135472030108
C1BD53DBDAF757C202000E6918D226458D1140ADA277964504F00E22B66D5020
14608F6D476314148CEC88EBC3CBB32CD83FA168F978B1FE5BEB48894828F1A2
0255776305892A6E37E4D83886ADD3CBB1CE596A0AC691235D6B4335610E0A72
A95C7EF0A642D70641EEAD894A548A804BFD9AD944D046BEFE7F9B5F5B9FF6AE
475AE2FA3A3B77336EFA17F88C1BC49F067E4DEAA8942074E5E6B2DE3B99AAC7
3AA1366AD6AF98C972ABB8403C710152DE098194DAF12E5D53118C799C34B508
406B8CB535B480831FE217C1E4597A4E36F12F73A22316553292DC6A255BE648
3A3AA13B3ECEE040DA280902D3FBF29D222AC8D14480849B85FC39784903F2BB
E40A9CC8388650FF5F32D1D7C70FE80F5BE01EBE48CE0A2CC0714BA4812D668D
1E4DAAE3B96B8C7AE94F7437D9D11E55BDAD6163341BE08A9EBD674FA75ED3E0
3F6F9582A7DD2A358283F12779A4866ABA13D3FDC9D7A339AD9AFEC345FB9555
97B8BA58F71456528C2104CD4A9B3E9C7CD9B83B043DB459E99BC691033B1609
E4A3C7935E56C8FB943B1C40E72FDACA931DB4BB9ED5B391A5D2DF0772621A5C
F1B69362996B1553EB27BBF688FD3E1352C93B8A41140A4323F979AFD16DFE91
8D05E86C7F8EF7890C34A2FD8193690F538089E569646A0C909214C0F051DFE9
2FC5598792E6234F8719B46911D35870C88509B392E1B931F0E402CF17ACD6F8
5C4315AA56AE725E5AEE21B549553C931579CB1B6257A3CAB999C4E7FC50D249
4A221A21C15AE0743684EC1C12746D6794B5EAEB79444958F34B191B4B0E3C4C
F9C34DC88C3C441D4C339AE2AD11E8AA2368D7257365C6F0C2F94B2B450024C9
C51B5977F128B1A11FEFCC00EDB69245C6E69AE8210DC0157687A7C0729C603E
8DD15D844ED28D820863E932F197A0AF8CDC8E90630F615DD92A73EB403B65DD
03D34FDC666D21FB706D26251A20E0018EA7C3F081F5A258A6C41B6250DD77B4
4844915AA880F26601B66E6F09E890FAADE9A01D57510750B6C3535311D47E2E
6939DEB4B67ACE829EB55AED39292C0B5ED46411F87E3537683610A56C673B08
0052F1EC6DB1470A83E86C60F3335D4C2FEC18B9724732043C0924138A564FD8
2E7BF28C98B3D08E72A6F88FC4A0DC6D2AEA086A383B231F3D928DC026653F6D
41151F5FC079E5BC60F0C289494E52E89E87FB1100E06B6D84836881F2E5FBF3
9049999FEE935FE5FBD378408FBC6A764C470DD359143CCD23B06C12A5F4E06B
ADB07E16A16CCCB2EE30B735A751FDB18860EF072593861AE35738B42F123279
ED1D6171C0A7DAD106157E08DD47A412DAB6804D17366252617C48F3EEF8C674
5A353B2FC1E93B3E12A6686662BE47DE031A354AC8CB7CBED1E41C081D7EF8D0
8BF41284136E173CCF11437ECBD45CFDC634E4A771719FBD00E07A272D83408F
D573E1F80001641C13DE28B14143FA7B547791607BF8610C9D8D6563E3A781AB
6BC5C397F39BC202753A0B7E517E7E4C810B9C18C74D960B37F7CEC95C4F4112
BB55BCDF8FD3FB3F984ADDF9F52A2566B3562EADB10518514A66BF66F28BFC3E
6748382F87B50829878722481A8FC363568FE5E6AEE018B02622570AB9003A3A
309F461F8BC8C79909C86264ADCFB53F89B7EEBC651DEE78B900FCA24F37FF32
7AACA1F8642EDC5564C1ABE24284EFCD263501C02CBCAF21B0D51A9282C1DECC
047189F49E94DF4CF54645A484601AE1594A8BBCBE93E5C6204CD56C3A91D940
89A1402ED8FA5DDC3563F4EEE3FFCE2223023FB6A1FADA2B57E8CC378E7E111E
A28F6CD9B8E453F71135CCAF027DAFFE9EE6208485551F5024173ABE0B1CCFE8
8FCB69BCA121AE5C69B7F375C8368FF794D8F690EE4CB44603F500894EFD5A93
C764772BBAF0D310737B86BC49B68544A73AFFA7BD9EF3FABB04B5E203C8E1F8
FFFAC5DF54A380952BC608948B815523445C865B93D6C7E7EE52EC5A8A0AB94F
FA61E1BA355F929D04600A92278ABF4325803BCF49A177DFEF6A99CB9B25AC36
D8592F6D7047ABB7A952C5DE49B6FC45A705549C32CD0E4F05E88C037AF26FDA
9053FB64C58E1B6111D6A28116143AE446A8C0A605330138713DF926D2E3B07B
4D0FC456D7B550E4E570A2D07DF79C6EFF26FA19B4B147F342BE472DD886BB8C
53B28EA2536C6D85AB61CC704C1202C871C8E9EA32EDF8795A682863E2DE061A
866EC07D54C89A80EA5FACDAEBCAA7305F7952EC2B9788CEA2A9EED997C0811E
5A6B4A1C2145554B1011B9574C413706577E449BA2FF53AD5570F7B71014CE3B
5AC2846294D14F091474CD832DF8DD84476548DFDAB9636F5EDDA477D9A3A586
AFF76DD247CD3936C15ECB746B70615923E44D496A9A225CEE4BF62A82E42918
1E9642E8F4E0E302614963EED7793421E6A7FFA475F92FF9D09A39F0A922B466
956954E0BEC619DD75BF26793BB37D77A20AEADD6F8369983FDA2EFEDDE5B2DD
7C35AA5A27A6A9E947366111613E07349A42FD906D7CAD2D777E985014BEA373
3B3E1A3823FF57BCD169C9C6A2D0432F68092981EB978109CE10871C5D2F2C1F
01A4E716BEA92970F61931A647B5C678CB09744793F9F973D94B576939E42631
08E647047FC06C308477478BDBBBDC518BE559C45B25C1E51B7D6F7A6E2778FD
28473E8966FBDC0FF34813E276B40F531473D65DFBD061301AD49AB01D26BE0B
40C83D5B961AE710A267A5056EB8560F1140344FC0B8ABAA1D8B4E61D4AC191B
D921BD6A3C250570BE5C5D5788FCEA8C86274C261CC8F4CB4B81419DB26E5DB4
937CA352D68D37339E9729FF6F56601CB9BDBCD2FF361ECADB0F680D105187B0
16B69320B593703A141C78CC5E7599DE9548C0A83302EFDA4F25D86FB7E5D57C
EBBE0DC3DD5E41E3672C09507449BBD6464F14A35C983651553BE65C500E25D3
DEB9876D51E3C798FB705626C673E7C85C4B0E5138BC4A8FB1BB2C5D4C070D42
E41B01FD8983E9871BDF3C0A23D18AE55EF1CBF3D0764B7E1E32A26A1C5DB16B
29CA84918A5C7CBA050F819F4AF5D503CCE9800DE1498846800043172D881E1E
2D64A11900664ED4E6781AD9F17F3DACA0301EA0135AFE8595487573BA31B13E
5F9D5A789E2E581B82259C5F0E7C567CE324875304D5F241A4AB34E8E7807129
85D5A061A53C985A899FA8936C16F776279EC054127CB6732A583BC06ABA3FC4
479BF7661518B1D356DBE03686E33AE48F9CF2FF1BE21B2971B2F99FF1C36C35
D3E7AC0EDE49866BDF936926A7C17B82A9310E3EEEC6F0C3B7B66530253E8941
AFEE58B5844CF8277A5B5739582984B0006C2C53BAC769AE4698A3A8B2F288F4
D3DCB0DD442BF38E2846E443636903FFBAC5723BBEE11823C74E2B87622503C8
99413913D54124E96405C77DAE0289DBA4DB334F26B5F39431C11A6528A39B8F
D97610D5693FD8A9165B5EBB99DFB8C466BF832326044D5382476D2031D571FD
982378977811758483DD1FF57D1E6FEE282A7B257B22E2D07EA53B415F928B58
8055FFFF4215CDCADBF499A3C81AE6B7538DF77492DCE6945807A097142E1F7B
395565C8BEA6BA277694B4144F2C7B4D32089D3DBBB98FFD6B94921BFE603967
982F3130ACC797BBB90B26889A542DBBA390656FA1C77E31BCCDCCEACD12C1BF
50F17EAA680B2B09C8A912C48D83CF954FDA0A6583854C78E7C7B4A368B0051D
76A92D4EA2579EC21EC74CB67965A2D47EF00E4137C2F8F3D4968C5E9EC625D4
93EE4517EA8D338CD289BD4AB72756E0655A93A04C6ABF67FB5417A5A85E0AAA
A7A4C16AED1CB4F7D65EA72EF317F76DDDFAF293181F34CDF8D5EF2C8CA23F3A
BC94C87DDBC058818AF0FFEA2E89A537774B747997B830615C40DFFDF3C2E0DC
64852F74E8D8B7EFE92A71BE4F59CA034E91CA6C53EA02DFAC46444D93EE4E64
10915E2766A52C866FE613F3BE9FDA0E28AAFE0793C1B0EFCDF68930F30A0BE7
3C4033ECDD7FB142747463600809D4B1A01C9D578535805876DDBDB256E12D07
BB1A32AED3D3B0C5D96A84AC2BA87C8E6A1955E696208307F985E6C08E49E138
3B64FDD90FD81938755E585EFEDC3879141BB8682A4F508DF546C2634C41921F
EC28D15E7DC1B3E5F58CDFB09B7543230B656576EED3372CEA1F2356439E51BF
5715AFDF719AA35F6F269B5539CBA5C4BCD81783B2FDC03589A434BAB0848E72
81E50D205536B56CC840129ADD7050A0688BED45967508B32D24DB04EEF0A0EE
0B5036994687A379140501119274F25480B6E8BEDD40419D912F790C070EFC04
4A0A73B962DD3B3B9C79FB00D90BD62E058868F08D9508837890BD5A5A1DF8C3
A10A846F7B463CA3100E7E749F0A8C2C576DF269289B4240FBEA62209757638A
BDBD8117EAB5E8E2DC88966A84A5EAD3B3640BC4AB3053A4589B03DC124341AA
FB39749365647585C1A03358665491EAF447F51CEBB039B0284F278DD628814D
A7F9A3B7FB8B60F90DE7EB8059F33088BB8661B0C3E6ADE331C35AF8D6CCC977
BFECC5E0608C158C162EB4A741E46AD7BCB8D0E5879F0DFF039F14C3D924BFD1
16C59193ECE1EC83765E4E8B89215797C7ED7467CCA46F761CA58B75DEA6DBE3
35359A3C5C57D913369E1F15764891682EC05EE0AEC30EF3C8657B37081C5FF8
52952E71B55066A52CE324B4DA2BD89475B5C6ACAE1EBDAE599FF89BFB72B425
12CC0B936DF9C2C5763C441847ABE1BADB1C49516B113820135CFF3B0445E6A2
DE6709274B7A9AECDF34D374D3E577C971203322DCFD0F3854C55567C7875CC7
D383B3464ED80521F5D6C5D7DF1B3B28A97F6C33A97AE64C5D9473A3248EB72C
8B1802C24ACB641CB40FA880980119B5C948AF660733F96156CD3CA38DC59710
577CF5D9CB1BE23819C9FF6B31855CD6CE1DD27D33D5323FD7578CC61F8456E9
5CDD06F565D940ADE1FDE668E8AA9F8FEB7C3AE9C33C7E41044AC99B79F5615D
5808EC973054E8A59C054255F9ADD8BF978C70E9BF817BCADEC4EB437AF8F793
B5DDE2EAC7D6BB08BFDBE6380F12D8791D481D375ECB8205A560A1C2900D93C7
10C63CB100DA09F263869B16031625D702C42A4CEE48326F74DB898B0B69AB6D
25A7A423F018F32B2C2863B4862278A27C09152C8C1F7197A39E9120C9900EA8
40E2CF16FFDE98A06CA65360524598A2542B17F7C1279009AA21DF5EBB45E0EC
04DDECB55738696D16A93733C5E4B17560F947A24969D8D5C47E7687F391F350
9F9C0D5D4CE7C6CB48DA6611E0ED9DB52B650D5C9D11503B3A867DA0A340CA85
BAD57A29C9EB6790328B3FB2A86CF5AA71F1CC42682C1095C476DCAD9EFCD326
15EF93F0D8AEC79D8FAAB36AF872FC97970C6A79780781D94F154E72F22A43E3
8360F5B4B6DDA4003F1C8A276BCAA375C1BA49505380BC687476EA040612E9B9
6580C168011D1ED14F1B077E54B8ED9F821BE9EBF60DE64D4B07E500F4AC8D62
E7610CAB654BCB7BEA38CC4786D5617DD8F6B2CCE52D685E9C3CD8E993DBDFA9
D53962C60256624B57B88566CAF51CC4B9621E855E863D32807717A5B104F766
580C0A4F19A02247220ADDBEABD60EB9099B5CA7327F8B92FA406191EC3BD605
6D2428677677B32ABBBC5E587DD96FEB90606E7F20580C04EE344A325F7E559B
4A9C32720E93FEE80FCA9074784BA11A39247B1D62A5145B5E7CDF4006378F92
94E9F8B8088429DBB76AB9A153A8FF96C56F0BC242C9465E210CA2A50786F578
2C189541BFBD9FCD86E0CF25D79859E27FE32A9A75C2A1B77D635B4FA2B9A159
8262EC65542410AED88923EC1DC1013FF90653AA3575CF53C2E1B011E4A89D1A
FBC6B70887FF0640EEBCF516D10CF71BBA2DDE98C62D6D326E1DF86A840B3CAA
CEFAFA7007523148AFAE68C4E502D00B2A8F645D91161C02155667B957D9C7A8
ED32AA498137CAEBE4C805A78A06DD71D5B68C6FE65EAC53E6D42BFEDA7F5ED2
895AE5153C9FB2E00933627D41EA1973134F2A33396C1C8E9556C8B4D20BAEF4
7A138562F01CC22086C0DBDF108ADD7413955D4A4DCCF4AC80A3090D92D92873
AA057706152518C27E8EF62DE1FEDCD14FD9B15D92DE73A3BA5DE824CDFD0FF9
3C444878BF6B1ACDC3D71B8344FE492FC702CA71E552A7A09D40136F5D1C9948
B964AC29D52415AD47FE743E29B79410A8515D82BDCF845878859AB8E5488DF3
B35C006ED1AED5B8066FCA37D63CFF1983E33E9F410AA80D7B49B4F341AB891C
B8689872C3C954E974350DBA19C79FB0535F40A8FBF4E11AF364CCD4553C6177
1135F0553F55CCC7F212E4882DD67FE5B7953A21854BBDE1CB8764A3FBFCD0F4
CF42D094F66BE3B8E05E0A1956B73967D150D6010CE1DDC55598F396870163F5
523AD54BDEA08AA8616B139E6B3D85EBC93D5370B05FEEFF8498F9751FEE9443
D7477A02E6E7666D8AAD82229A2B81A984B88BB6F50D127985D2C0B8CD0280A6
4075EBB816005F5A184AC39226BB716B238F39B2484CBFCEB50A2A935F484F22
A2678CA5E46CF097FDEA8F1A3D5B764D091FA63E9EF9A65ACA31F89469B33670
E4985339D02D913E53E0063FADE76588630C1711C28D502FDA0BB0D5240309A2
FC6ECAC960FC3F0C7FF197EB528C7E7942A5D32FB42A918C603353E1C0F6D525
68AD636D5D81EDE1B3D107B9D06F0CF60D6AD2C68DD0E994401E553887C3207A
CA581E6B92FC0045032EA3DB321E4256B91FE813058257B897BB76AE56D3D46E
8C5D5E920E4E60409772E154A9146E59F9C8E04214A6BA409E13A93E57AB819C
5C5C06952C7E6FBF43C7C4A1859E9FD660C33C46998DFDDE4706E5EBF3F8F980
C959F0647741038C935A654823DE906C129679CF670A673407F06762FC365AC2
BCEA66ABFDE01A8575BB75B6DBE08F76052696887681D69023393A8386F04B60
B6403931B890783035F2414FEB7594B41994D6B08356FC2B803224476F9B116E
77E57C46D0422FA4C2803D264B702FBDAC2C15AEC761938BE0E6A8623509A02A
9A2DBB81AC69B103D4C3DABFC6CB56CC2C5EA0FDF5F0FE5B6D22DF37F072C46C
00B022211890B4D52877412E2AC0B882619ED673B40DC4C6F6F6030163C32443
F82AD443C1313E3D3AB0BC2A3367B48E2FE98EE5C895D8B463EDEDA118E3EFC2
CEEEE3DB4954F33B63EB7B83B5A099F95CBFA315673BCBBDAA852F90021B5707
9DBBAA80881D2272C1B9CE2303A8B16000F4AAA776BC407572F9F49250FAA627
7B464F0FB520D3506D32B57229876CB2BD95A090247D38DCD1A55F02413124E2
E70322D92FD4CDF8CB50C2CD1622C53115D8DF5F061E85388A8A1B86BC65C855
0135C2D6F837273EDA642779BE194FB2C706FFE4951100A0C4717B91865817A5
4246D881522376B4005046FB316955EE384FA2A2CBA2C7D50FDC829E8AABC44A
7C54FC87CBFE990463B6971CE8A99E7E1B40A083CB7F373B85037A932A551F4A
A8791EA568B13F90ABCDE094E05AD79548381CB29350DD4B3A52ECBE76606F23
2DCE273E8AAA1E8E40DFEC8E91F8BD683BC5E33E2750151ABF4BDBF30E2FFBA4
D2889F08209550ECA7645C1EB881E7B25783DA80F8BBEEC92439287B8C328769
92428E17C47B7587E44157BE972F3958BB81CA51E5B036C8B222BFC4E80BFC23
DBB5185AB1DF9DE5FDC7F2FDFCAF16AD03A19A5FC23C13F60B8573D2292FBA3A
59B665143146D774C97DC21D423AA0CFC29754B5139AE7095BC021642DC14095
18893C467CE7F0D2C598C429427B4DC77758A705EDD06155FC9CFC9C16B7DE9A
96B83F4566DB20C17B6868DE740AA5E482A91A4A107B89435A74E8B04D3ACD77
C90B9DA7008C58AD27F1EEE7C51AE3C3AAE31DAE25A82379ED76D89B3C3DF7FD
80B4D1775229F86331FCA6F159E9DC1859BCD5EA07214C9812525DA985CBA66E
BA6A82521EE00FF832D511D941A29DFE7D06DC1A5A4EC119A22F9EF2068381E7
8CAD6E540AAF896F1C36AB91916F11F9DA6FF641BC097AA2E578745870719248
C92CC54C85EC55FD51DEE9755D8149D15883A10C0FBAD5E224DFFDA323829DA6
27B4476DB4FD186A8E5BB36A5E4310E82292430AAD089FDA767191126FBCD2AE
0EDBCD359B9EFE2B5E7F7C45689343EE0EC95830F71C16C00955F15CFB102D5A
F8A50E6F0C48860CF7DDC24B7F3023E78F4A771D2E5785F0E73AAF2B7DF10C3C
32C7AF5A1B14DA261DE0C19DACD53736CAFEA55603B3DE1E9FC253AA205B9C4B
56CFD2EABEAA0BF6CAA10F59395B37923EC15C966BC5916AE42B9B20B103A55C
C303281AC0FE7625D945C06C0694D319E12D9617D131368678FAC347C4B47699
A1537466C8BD51F83620C745C4266D33000F0569EBDB8636248ACD69BD1895B8
B11BF42EF3B12D5C26BA51E959A7B20999968A25D6C6349F535ED05E3DD96920
269198242A9FA751D18E76C6FEFEFBCA51E4B553F377D491DC36281794D2D3BE
77A14A4EECA46994B7EC417FB446653B202C55B98E4DD264B26BD43DF324CC34
9EF83F6FB35753CBEDB5A1B1ADC5D2FD7C3EAECB3480A957CF37DF6076E8C31A
870C1F2A864086D44EE1FF6F453CDE180E430E2A0D4DC397EAC94BA94135C362
5D041803F561D2641517753F08902780AFCE57C3CF3BA04ACCA94F46777FFD97
FE565A780440B4FFDA8675E0DD57A83195AA7179E962C30DB2BBD2FFD5B91C16
A0DDB4CE875C7397F693BE8FBE5BED5A0D208149FCDABFFA359FC611CF3BC599
5441E0A549E7FF49D6600258D30AE919BB598AAC417E84601208A2059011D852
6850A860CE656DD90DA8DE77E0F4D093F818D72809BB872343319E116F53FF91
150F59CEDE54CFFC16221BC1D95EE33C6ADC911FD871B84216FAE4F5959C3B20
BA13CFCBA822C2E2F376D838C7CAC2009515DE35B353DC92E4DDE5336B8EDA5B
C92FCC26D4F49EEE3354E357E450753728251FE1B10B7FE3FC7824D0F5CB8684
6B8DAEB1B2D5E6D3412CD81461BC4F24DC99F01517D96556F37C359C63495966
2178D46546A5F913F35ACDEFCBE414A9EAB291D6B8A48F00DDDBF0A3F6A50CE3
4EF9AD2424D620BFC92A7C5421E275E41DDF614439FED165716579509A492226
CB1572A7C3065E01DE76AE02603118E06280942AFC7173F218CFAB1D9AB251DA
F017D7055C4D881E666316FF637C83FC0BCE9C7461459306AD3C89CBE564A111
77F6F1A3E3001A5D419F22373337388BEF60CAD17452F2D058573CCE520B18C8
D94F7DE23E59AF25328276CF6EC5CE4B7FFE268F8C679CED64A3BB59C316246F
12B7263A1834D502785CB7920AF98CE18281A5A8ED0CCBD7BDD86F626DBF03AF
EE0A97B51478A99012E856F8AC35516BFCE0FAAF2B80942A73F12C7AF5221817
10A63ED0BFB2B3A69EBCDE0583BF829F42A056E38A754B2B9FF8EA6869AF0069
7CB5662378AA6619C93D7BE3A47572AF911DD595D5FD7C314CD633A21B233053
B974AE470B21A82EEA0E6F42AD6BEC1F3E64301B15EDD752018B4B9506C60CDC
91ECB2846FB5A599D66C0EFD93ECA7E1FBCEC0F26DD9FA7E21132DB32B3198D5
E67113450C790C1487CDEB4BED75CDE9F62014D49E44687601B380E1114A7370
425E91CE6A41B0899A09BB3C2FBE93CC8C84233D7907604167A1F99C7FF25583
1317AE64D814EBA2BF502A60955B487DFAEF9E73EE622813F93CC2838C4CF907
F132F97CFA81C8EB34B88812A4596A40121846C4B415F8B9D9D8C76F22375E43
0AC6F0D427B690433FE11C1F8A6CB4199FAC8496541792ECF80CDD36565033E4
30D0D30FF8719826ABCEED1FE00735828A69B964AC51D8859A9C77145B7F73C8
CA62950B8B3CED284EC9B654F835954CBE816B9E469F557821F509AF65FAEA2B
27748FEA70A7E93782DA619208F3178412062E291B2F03D2EBE868CA5CE9D9E2
FB097FF7F16C129C1DDC26BBC2441F8E390530FB44A010F9AC40C7F822D90A38
D794EA497F6D644EFBCB4D9E19FA3C39B5A2D97FAF8847EC3379FE07536C3141
85620A9CB2DC42B758D865B852234EAB248EF363F338D9C26C4C8C95039AD1E2
991C1D29C096BC092C25BB25A6FA36080FFDDB4352AEAAA2A55FE866BF3FBBED
4DCBBB4A8E5B4DFD73FBF6FB412A07CFB0E2382C89376AAE2BF9BE0F5EE16583
2AB3CC7326AE7251E48F94A219ADB1A955A527E15812A439A3E23F4150D9D55D
7BB7D32D5673423164AA860469FDC7879A10C9BAAD8AD976607F4FC8FC1AE707
0C1887E92A3B61E589233F88966216A0A293C16CB83A59D6B9C9BC3728E26B09
B4A4AAF61FFC6E8B74C14702B8AC5A4A9ACB17B62063057E8428976C8F4FF3F6
657E8CF2416EED3855A17CD913C04F3E1CF69319C4569EB462A1AEE270B20405
51DF58E565FF29F9B1891B6F8D9E65A02FC063E969A5DCBCCB4C2BCDCFBD7807
2451C2B7E25F23D0D6AD63594B01CA182190C5011D125AFC1AB6C16818DEC188
FFA0F001DCF2C43EC83AF1B0F6D14B8668537717429B4B4D4E675DADEA378A31
109367A3BF3C73E826F1BFA92A98C6708A8901F9964B18C7E3704CDAD37EA3F0
A631929DDC92B32FBB0726AEAB065CC9DBAAF69956FB61EA9E3242077948820E
D80749D803121E2B78A4799DB37024B78BCB876F4C740F9A75C858793BFA7055
057A5D7EC414A20FF001FC058187D1049F51C582B1035AC6186C9345405B5147
59D3B8AF59E12A99EE5F46E92FF6CA6BA5D0B204B5CFD5514814E4B4B990D072
CF076A50DA9FDEA47FEA445F16F1706335A641920E62DD5F8A9112A7B7690AE6
34B317A8ADA93B4256A48E2BFB86DDA04FD42988DFD302BC24DCD68924527FF6
AC8B58B656CFAAAC1EAF030D5A854FD899941F6B1FBE727466BB0D892CD8D195
5DEADAA7ED2FC50E0CDC86F5E7A855D8EE9BFBF4FD9077092566DAA1790904FE
7916EC811F96DC642C62EF18D763512FD8CDD59DD2476156F7AF7AC1C566383F
BBEEF3214C931E051A1A4D7C2A918B8CEE41F5C9C81B7E2FFC4DB949AE78D29A
F6375EBAF03A82EBE9710800AFC1BE60F2B9B2E0103B8AAAA86EAD08324EF210
C36A904166C4EDFBBEC24D4F6795AA95FF5908A1F5EA8002F438844CA7314D30
97C868E87CF994AE9E4C2D87564026F6F032BFC57D7EFD4AA88E65A3A2F436FB
BB3FD726DB52B1B12CEA753FBCE23A43544D5DD8EC0DE649D59ABFD021E8ED64
B7E8F1ABCE7A9AB08A7384AB6049D2BFB7044BB5BC93491803107B8B77789D69
163C4EED7C5CD1ADAB4DDA5BB00900280912A6C5E8EF20528EE213BCA70ABB36
41943C4BF22444432D5E117F394D0E56F85296D00711311E1F887D3CB5E88847
A8A338C4F7B3F6AFAA51EE004C092F31AD164E3D1745C25BF29BEF276BD01D03
E222CB1FEAC00AEC41BCA5ED472EEC3D796D2389B2B7D7E68048662D58DE0A32
489F506E8ACD00353504A0C89364F906F5F92FA9999E8056590E315936B68DCB
367F683FFF0A38DFD8848955A511E40D5E3A44B96C8BA925FF40184F672C2204
337ED7D2DF299D1E83288F575E42AEC58F2D3BFCF1D12BB59BEFC92A7092D7D4
14B74838727E0BF2796615F1C22607B6794509B9C217F27D5E6FD9FFE5AB3181
C02161BFAD35F90785F45CB274EFA2621B8674C240E46C24583410ECF9729769
D63D85A44E0FE685064759E206A30A1533E47706A30A94EFDD1F291435D0A5CE
2F4C5964374E970F6044AD220140732BE6709889742124F96734858378CF2D0E
A1A8E336B83E87B0209EBAE5BA435ED2EDE4F0D10D73C50E367E585B348330F5
2A7F708824ECEE07568AD123DBA552A22CB71D501593935E04491098866B8366
FEC55BDB918C6373E3A8EE1F6005B148D454C803B3D7193D5ECDA9CA7AA2162D
623ABEAF5D063795D02F0CCAC427207A248CAE1590CBD32F274745E7949D7FFC
35932F8C5727846E9F93CD7CEC3859C77F7364BB75AE2023E4FEFF2625567F35
C96BFB66CF292A2A9870461EFAF9B347F373C7F4C625230887EB03D99E8D7B8E
37CC6939B5A0E4BB2FDEFB7DBBB573ADBC7897CC4D2A78BC62486F009FA1C11F
8A6DFC3BF6A233F4BDAB302033E8FAC299F7DBA4238EC152D36F6B9A85B8663C
ACE9255C8F6D00B768FFB8CB1A5F9BCAF0FEE4AAAB651EA9A0D4DD9AB7BD638A
F7109A8F504117BA63EB31A038BDEC38ECEAF419AC241C290694E3E58E7A9438
609395DC7F06C42AAE9CC7667F6FD2E92E00965986FF9580DB7D40CD53EAB1AC
B93916B4FFF96469DBD8FA9A0CFC2D858F6465B585DA90897847D2D98F7A3C75
73CBAB823BB065B9BB1D8A106CFCD1AC03ABAEAC5F86F132C30C72D0061C370E
7FF45A5F3561FC58B2580BEBA4800F08314B0AE1F6901331843844E47D473A61
23AA2564B00219949EDC7D45BB874493329A8428FB7736D304E3AAF6E16EFF18
55083B03D547DF225DBB3A9244F0D1CBAA8A2C53BC8C62FCF84579E60D7A4531
A4823A20A795B20D52FDA4B7B6B9036A831D5A288867E8161960CF653CF77CCE
DBBDFBAC9A7EAC00FE8151D6D782D12C274531A65527605D21A5EE3A70DCD99C
3C4AF4BB948DE9A4151AE1BB4CE3E9989B24EDB7993571205595D8534A2EE753
E2BA1E45A7C3F2DBC131A353F269167228687D12800957ECD7F11BD6325472E3
D6C52B65D0F312C9E996DC73DD5AF23956D2BBCBA7482FC1C573D16E9B334F90
F52BE26157DDDF0557E1E6DFE3D68A1F7AFBDD15987A393F78245BE67C10305F
943EC6FEA64FD7723404F305243CD2E9F0306AF8E1E0FF5248799CBDFDC78D27
FE672CD10024F331FED554E459021B141F7AFEF50790B16755A58B8FC923A886
6052C52C8B89E54136056EB107545286DFC4DA10E1AD69CF4E9296EB1582F90C
B85C0BE5AF9CCFADC9BE36F224D7CD37EFC3113475AC9EBE9554CB966E8DECC5
EA684F0D13A6A8255BECB29857F64E35425AE8849A4C0ADBC427F98B5D5FD78A
8C2EBDFADCF4DA9D7570D5909560A6E2067FB9D9324E2FBF33E6F0F24F0D2FDE
67EF711F894A85EB613592E63D6FB4A5CB6265AB5DDA3239665A5ABCFEF9F54A
4E9DB5D4FAE9D5E2516987E9B2BDAF731AC2334729BD282DAF3B08A79A9A7566
E2DCFE0D4FEEC495BBEE6436DF27FD437C9F430EAC2AF1A96954ADB00A295F9A
52F2355984A39B05988272CF9F8E64C773504FD1009DC60982C89E16B5D63B3C
1F8CE84D0063073FCBC639230060D6F466B6D4A5AC877F73BCF39DF158A69AB6
6F1CD00371C61F573AA4F8D17FD070D6035E0199B7CD44D745E62745137FF523
391F32188FDA1718B160228B4E8600E409C5FD2F23962A293B0E69F55D64112D
51B6723CE6DF7EA4D0E1AF700A6526CB194B8692DB82939669A03C2A9A5A2ABC
3B97D9548379D21C9FF2CE7885FF49E259F1AAF6AF750C557ABCDD335197C4E0
336EA86E83FE4B1F7E6C978622C0E5CFA8E39F593B3B3E542CA762B1A3489617
40CC0A1EA84F394617A4C42C30771B11DDDEF76C731F205B072FF6C5ACA54F22
2883372B8DA76905ECB5BA8C3BC4AD035F1A08C2C8CA60FF8C0ACA27447205F5
F800EDD2B993E3C59FD0EBF82AFFD8FDF554F130BBE33440C12B2451F15F1D69
0B2F1CC8A649A496E57D1387B099E95E488C77CB80451B39E6C2C7C09A3BEC89
E0A53D628EBEFAFB6713809E3D419113A4EA8EC48FD34866C296410BAAB5D0A7
91ED40E9164B081DE6C6CCBD48FD174FE02A30EDE5A6F2E2747CF27BAFB750AC
47B88CAC003D0B7E1E89F05B202D01D8DC0D9F6199B082EB96499372F67E07FD
64E75E3DE9A6E332B45BAE4147CFE84001D9FF79B805B78DE565659E24A72961
D68B31041D6488E1EDC4194F1012D817A602AF09B4F3EB4251F4332FD4535AAB
3BF8D6BDFCA215ACBE7B3591DAF3CE8DFB913BD57970865372EFF8B11DA2B741
70F9C2E892B892B53890152DFDCD574912C0F49216325D9B7A2EAF3DBB6C33DE
E9F83858E43225540E117AE575C23755F84665E4F76A546B359EA8EF08ECA1C2
E8AA8BEF39A753892EB4FA1CB5087541547F09FD9B14AADD13FB83537771F78E
BFA257379878F7200C1B3A11AF590EE527CB1B1B5C6AAE4AD179EF07DBDE4F00
EE17B59BA801D75428F397CAF21846836051BED91C5194F1AC653ECE3B2E4CB5
2A7AAB77BC2494ACE085216F38A3E192BA9DFA3FFB3F3059A71E445070E06CCE
279A4B0FB50A29E69E8EDF956D2F1D07C81764EA0EDC0F472E88025A7E371DC5
4F55A892F781D0BB8A671BC8267401DDC0BFCEA8AA61FD35AD4D95343EC2B212
8769EAFCBE875C4429FAC3CB3C43BA0710BA64C06B6E5FE0F1C54E9C083E0A81
A38854595C678C75CE1BCE86E3330B3F3A59BC1388ACF5FA4778E20B266F36C9
B7FC39B98D9938CD66D0D86C33F026530AF093DC58DE4158F3EFBE1841B63A54
0A3BFAF1955EE4540B340CF9550C32340C2F6E44F8C82C26D0A723E985F8ED69
1D44332672F002393FB011BC9BEB09212CED311699535037D74B52E367C1EF76
1535CCD60C36E2609DA8FE7DD1B011ADEA37FE230039E364866B707F30FBA90F
C8A68BE88E42D2E41F88BAD86D06428217BA5121CC6684FF7944C11109E41693
E5FCBA6C47D80A07616D21FDC2EBACCE1A353675480723655D1A254206311721
3D61A336E38848DC1831411655CEA9BF87A682FBDC8C2D4D15D4E77A164486F6
9177C5D5905E9ACB60F74EE8A201CADEFA765E11551CF9D2A3DB467A8F6F0E8D
8FD1F7936C47873150BFA02E0EB80F65BD3E059EAE3CD99E3B39725F0B015315
F59F7015C31AE14190EE900F2BFA6102F344B1D6258133007CB33ADCC881C5C6
D91E161FC806B62B1EA648D10B5C9246087C1712EF151F02BF3BAA093EAC6384
23FD879CC4D1AE45A2AAA8B085468F0AE1EAEF8B5985D5C72BAB6449AE89D65D
4FCE12B112022C105C8BA8CD50B69AE299E821DDF1DFD08A48A8DE1154AE8BC9
0CDD693926CA54920681833DCCCB0AE7875D99D43BD285580637B152EA8C28BC
52DFF627B4054236BD5230FB231E00A10A290B01EC1A5DF2B6D39741C66C4C0D
54E91A2EC25F3F86307DAEF570DF948BB7E0CCC48571CA61F14ABE1F059B6340
8CCF49275D0ABFEAA89484E37745C5B5A4EDFB506A0B711BF59BBB4F547BE3EA
BE7A900FB3D328C9CC7CBD8B3D74886FB02A034F0C206D23AC26420D260698EC
F1C4F0CEF19E5C6FBCF8AB1DDC8836355ABB5ABE245CBCB813516C0B74F81BAA
85AD9413217282418EF195B0C1501E5A5B4B690AB371085B6FB42CBC5C22E808
26A5A7E13A62019138FCFF2A54855232F90EC6993E35474BFAE12A2C1182D9B8
F44D470BDA5F538A5D14C46789CCC9307E2F16FF47524FB1F34852E6BB90B15C
D4708EEFF98DDFD9748A05BC94518E6E45ADF9A4CB8C75314244ED5022A4BB64
405814B93D3A8343E7B0D42CE384D8A0BBE5EF9201F87E0F4C5C5FB643D0E471
103192D8BD108EB0B011D478AB32F779A957B31FF4E1E11A711B5FA64BB772C8
FA27B1832C444D74BE1BB292065DC2137585E142BE05421679EFB83241F7C86E
F65B6D6CECDDC09DE2F3F2152C35FC56C2967562E93757966F5AF41E197290E3
699C970CC93CAFA65D3445F8EE183B90ACAE116C250D144F07FD4BACEBD1C687
22F7E339FAE809198FE115B19A0103BF3305C5FA1E0EE8E989DAE2C01D358167
732A7BFA65565C89E10CED9210150D0C449601B8C6BF9FE60B46A6D3AB1EA6B7
88B230809318AC5190E810685300F784C7114D4929A4BC6709E1BBC4E4726A47
62F979A7AC1FEC7B01F1C43C0F0BCFB44ECC886F469A7A37F9C8CF5C4C9D6D8E
E0B939E1D7EBC00774739D0B825F26C1966B383C12397F87889B81DFAB4AE2B9
7D129F16169C0DDDD9855A3BF960C0AE25A109E4DC76632B31EFFE44F540AA61
6292DDCFE52D57D4E723B28DDEB879C1B7AF2827397EF47EED9DF0A4C59B4B61
9897E88C6330C6F5D69230913FB2F8442AE7D82BF372D17EC1C83CC4BC9248D9
E42B2B838369BE6A4CC3933A73BD0D1B761B92AB4A9FE4667AB307BA1A058BB3
3592F516A37993AE8189BB30C411A5B7DCCAF8D61A542DC8E1F3D5D061C84DAF
D42B1F1020E746241C94A3784BCDB3CD10AC3BDB08E92551B5FF9831F4AA86EF
E824B68398F830807AB2CC5F25588B68876854AD17AD089EFDD2DD545000BEE1
6693EFB33DDB82B4A09EBB1CE3CC2C820BACD37B223CDDB5B2C2BA0E55B8F612
66CC1A16166FB712FAE36665B610D31CE9C1AA3F50011C5D93999B7E2692001A
FA16A0B5D7F60F0C4023556B0522E9E0D1D00F38A6E1E19A4E4D04FF9BE7AB12
C76BA7362F39A7376E45405E57C9B412880081DA2F05AD70EB6A2AC98D76EB90
FD92DBD49923E408269B33527ED0E9197508EF378D4B1BB52E700E9C4E95C174
0CE8070EB9FD20BFDE89E6346FB90CE230E4411EB538C98E8C4543752E810E46
83749251A9C2727D74879EDC341EE6ED1DB262EE708DEF39BC6DC4BBD44F3165
1F5241F7AFF9B8BF2C74FD300780715E12C676F0DA8F22FC831E17D66C585140
BD9A0BEBF9FDDB466824E7EA8BDD22B398D4B2C5D77326C2DFFD2DD6AEFCA7A1
BEA779B111D5088D4C839BE0B83D1EFF83A630167EB5FD45546596A8FA01E116
1CE4E08185613E4F417470C20F09F43308D387D247139FB2989CCFE1A7721637
4F8E1D96D45E4D607C020E4D18CA0C7AF81DAF1EEC01B97FCA1DC474BF00DE0C
98AB716E5A7FABDC9F90212C1A1867BA04037F89758D2673B45AB7410929487D
CC9E19E7BEDF995390115BCACD4B830E29314C12BA6E573700A35825E32F550C
4B1F9D2807F5416B378A86157FE245171880E419632EAAEB7B185DE9449FB7BE
15DEC577ED9F54C9D9EA3D2FA34671FBFEC0976BCE4BE80932F33A18A37D58FB
09A9286234D558EB937A8A376FB50876F33DD9E37176E5B82B9217FCE987A6BF
7E7F08CC9B124863F7938D5667ED3AD0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 50331648 25165824 1000 600 600 (lab.dvi)
@start /Fa 129[44 44 1[44 44 44 44 44 44 44 44 44 44
1[44 44 44 44 44 44 1[44 44 44 44 44 44 44 44 44 1[44
1[44 1[44 44 2[44 1[44 1[44 44 44 44 44 44 44 44 2[44
44 1[44 44 44 44 44 44 2[44 44 44 44 44 1[44 44 44 44
44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 2[44 44
44 33[{}76 83.022 /CMTT10 rf /Fb 240[42 15[{}1 83.022
/CMSY10 rf /Fc 198[33 33 33 33 33 33 33 33 33 33 33 47[{}11
58.1154 /CMR7 rf /Fd 133[60 3[71 75 52 53 55 1[75 67
75 112 37 2[37 75 2[61 75 60 75 65 12[94 1[100 101 92
101 1[128 81 2[50 4[103 1[96 19[37 46[{}29 119.552 /CMBX12
rf /Fe 133[37 44 44 60 44 46 32 33 33 44 46 42 46 69
23 44 25 23 46 42 25 37 46 37 46 42 6[51 62 1[85 1[62
60 46 61 65 57 65 62 76 52 2[30 62 65 1[57 63 60 59 62
6[23 42 42 42 42 42 42 42 42 42 42 1[23 28 23 4[23 26[46
48 11[{}64 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608 -916
a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -608
-916 a 0 TeXcolorgray Black -600 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600
-600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 -600 a 0 TeXcolorgray
-600 -600 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -600 -600 a -600 -600 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -600 -600 a -600
-600 a
SDict begin H.S end
 -600 -600 a -600 -600 a
SDict begin 12 H.A end
 -600 -600 a -600 -600
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 -600 a -600 -600 a
tx@Dict begin { 245.76563 -192.0 } PutCoor PutBegin  end
 -600 -600 a -578 -521 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.54164 neg 244.06422
9.54166 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19 w Fe(LAB)18 b(4:)32 b(PIZZA)18
b(QUEUES)f(BY:AMULDEEP)h(DHILLON)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a 0 TeXcolorgray 2567 2837 a Fe(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 9 x Fd(Queues)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5516 -585 a Fc(2/)5582 -585 y
SDict begin H.S end

5582 -585 a 0 TeXcolorgray Fc(16)p 0 TeXcolorgray 5649
-623 a
SDict begin H.R end
 5649 -623 a 5649 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600
a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600
-600 a -572 -600 a
tx@Dict begin { 76.80469 -38.40234 } PutCoor PutBegin  end
 -572 -600 a 58 x Fe(W)-7 b(e)28 b(will)f(b)r(e)h
(using)g(queues)f(to)g(organize)f(b)r(oth)i(pizza)f(orders)f(and)i(the)
g(a)n(v)-5 b(ailable)26 b(driv)n(ers)g(to)i(deliv)n(er)e(them.)-572
-443 y(W)-7 b(e)28 b(will)f(b)r(e)h(using)g(t)n(w)n(o)f(di\013eren)n(t)
g(t)n(yp)r(es)h(of)f(queues,)h(one)f(for)g(eac)n(h)g(queue.)-531
-243 y Fb(\017)41 b Fe(W)-7 b(e)28 b(will)g(use)f(a)h(Link)n(ed)f(List)
h(Queue)f(for)g(the)h(Orders)e(whic)n(h)i(con)n(tain)e(the)i(pizza)g
(and)f(the)h(address.)-531 -144 y Fb(\017)41 b Fe(W)-7
b(e)28 b(will)g(use)f(a)h(Ring)f(Bu\013er)h(Arra)n(y)e(Queue)h(for)g
(the)h(driv)n(ers)-572 -600 y
tx@Dict begin  PutEnd  end
 -572 -600 a -572 -600 a
tx@Dict begin { 537.59766 -115.20117 } PutCoor PutBegin  end

-572 -600 a -550 -371 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 22.59721 neg 136.5447
27.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-149 x Fe(These)h(could)g(b)r(oth)g(b)r(e)h(done)f(us-)-550
-421 y(ing)e(the)h(other)f(t)n(yp)r(e)h(of)-550 -321
y(queue.)35 b(W)-7 b(e)24 b(are)f(using)g(b)r(oth)h(just)-550
-221 y(for)j(educational)g(purp)r(oses.)-572 -600 y
tx@Dict begin  PutEnd  end
 -572
-600 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 2567 2837
a Fe(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 21 x Fd(Pizza.h)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5516
-585 a Fc(3/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray Fc(16)p
0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649
-585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#pragma)41 b(once)-600 -285 y(#include)f(<iostream>)-600
-185 y(#include)g("config.h")-600 -85 y(#include)g(<FL/Fl_Cairo_Wind)o
(ow)o(.H>)-600 14 y(#include)g(<FL/Fl_Button.H>)-600
114 y(#include)g(<FL/Fl_Input.H>)-600 214 y(#include)g(<FL/fl_ask.H>)
-600 313 y(#include)g("LLQueue.h")-600 413 y(#include)g("RBQueue.h")
-600 512 y(extern)h(LLQUEUE)g(orderQueue;)-600 612 y(extern)g(RBQUEUE)g
(driverQueue;)-600 712 y(void)h(order_cb\(Fl_Butt)o(on)o(*,v)o(oi)o
(d*\))o(;)-600 811 y(extern)f(Fl_Input*)f(pizza;)-600
911 y(void)i(driver_cb\(Fl_But)o(to)o(n*,)o(vo)o(id*)o(\);)-600
1011 y(extern)f(Fl_Input*)f(driverName;)-600 1110 y(void)i
(dispatch\(void*\);)-600 1210 y(extern)f(Fl_Input*)f(addressName;)-600
1310 y(extern)h(bool)h(status;)-600 1409 y(void)g(deliver\(\);)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600 a -578 -528
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 3.62498 neg 197.9861
8.625 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -550 -520 a
Fe(Con)n(tains)26 b(all)i(shared)e(v)-5 b(ariables)27
b(and)g(functions)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray
2567 2837 a Fe(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 21 x Fd(Order.h)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5516
-585 a Fc(4/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray Fc(16)p
0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649
-585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#pragma)41 b(once)-600 -285 y(class)h(Order{)-600
-185 y(private:)-426 -85 y(std::string)d(order;)-426
14 y(std::string)g(address;)-600 114 y(public:)-426 214
y(std::string)g(getOrder\(\){return)e(order;})-426 313
y(std::string)i(getAddress\(\){retu)o(rn)e(address;})-426
413 y(void)42 b(setOrder\(std::str)o(in)o(g)c(o\))k({order)f(=)j(o;})
-426 512 y(void)e(setAddress\(std::s)o(tr)o(ing)37 b(o\))43
b({address)d(=)j(o;})-600 612 y(};)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600 a -578 -528 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 3.62498 neg 121.18141
8.625 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial -550 -520 a Fe(Con)n(tains)26 b(the)i(class)f(Order)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 2567 2837 a Fe(4)p
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 9 x Fd(LLQueue.h)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5516
-585 a Fc(5/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray Fc(16)p
0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649
-585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#pragma)41 b(once)-600 -285 y(#include)f("pizza.h")-600
-185 y(#include)g("order.h")-600 114 y(struct)h(NODE)h({)-426
214 y(Order)g(info;)-426 313 y(NODE)g(*next;)-600 413
y(};)-600 612 y(class)g(LLQUEUE)-600 712 y({)-600 811
y(private:)-426 911 y(NODE)g(*front;)-426 1011 y(NODE)g(*rear;)-600
1110 y(public:)-426 1210 y(LLQUEUE\(\){front)c(=)43 b(rear)f(=)h(0;})
-426 1310 y(~LLQUEUE\(\);)-426 1409 y(bool)f(Insert\(Order)d(&info\);)
-426 1509 y(bool)j(Remove\(Order)d(&info\);)-426 1608
y(bool)j(isEmpty\(\))e({return\(front)e(==)43 b(0\);})-600
1708 y(};)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600
a -578 -520 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.59721 neg 236.38844
9.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
28 w Fe(Con)n(tains)26 b(class)h(LLQueue)g(and)h(the)g(NODE)f
(de\014nition)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray
2567 2837 a Fe(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 9 x Fd(LL)44 b(Queue)h(Destructor)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600
-600 a 5516 -585 a Fc(6/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#include)40 b("pizza.h")-600 -185 y(LLQUEUE::~LLQUEU)o(E)e(\(\){)
-426 -85 y(NODE)k(*next;)-426 14 y(while\(front\){)-251
114 y(next)g(=)h(front->next;)-251 214 y(delete)e(front;)-251
313 y(front)g(=)i(next;)-426 413 y(})-600 512 y(})-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600 a -578 -520
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.59721 neg 136.5447
9.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 21 w Fe(De\014nes)20
b(LLQueue's)g(destructor)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray
2567 2837 a Fe(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 9 x Fd(LL)44 b(Queue)h(Insert)-600 -600
y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600
-600 a 5516 -585 a Fc(7/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#include)40 b("pizza.h")-600 -185 y(bool)i(LLQUEUE::Insert)37
b(\(Order)k(&info\){)-426 -85 y(NODE)h(*newnode)f(=)i(new)f(NODE;)-426
14 y(if)h(\(!newnode\))d(return)h(false;)-426 114 y(newnode)g(->)i
(info)f(=)h(info;)-426 214 y(newnode)e(->)i(next)f(=)h(0;)-426
413 y(if\(rear)e(==)i(0\))-251 512 y(front)e(=)i(rear)f(=)h(newnode;)
-426 612 y(else{)-251 712 y(rear->next)c(=)k(newnode;)-251
811 y(rear)f(=)h(newnode;)-426 911 y(})-426 1011 y(return)e(true;)-600
1110 y(})-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600
a -578 -520 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.59721 neg 167.27126
9.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
28 w Fe(Con)n(tains)26 b(LLQueue's)h(Insert)g(function)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 2567 2837 a Fe(7)p
0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 9 x Fd(LL)44 b(Queue)h(Remo)l(v)l(e)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600
-600 a 5516 -585 a Fc(8/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#include)40 b("pizza.h")-600 -285 y(bool)i(LLQUEUE::Remove)37
b(\(Order)k(&info\){)-426 -185 y(if\(front)g(==)h(0\))h(return)e
(false;)-426 -85 y(info)h(=)h(front)f(->)h(info;)-426
114 y(NODE)f(*next)g(=)h(front->next;)-426 214 y(delete)e(front;)-426
313 y(front)h(=)h(next;)-426 413 y(if\(front)e(==)h(0\))-251
512 y(rear)g(=)h(0;)-426 612 y(return)e(true;)-600 712
y(})-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600 a -578
-520 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.59721 neg 182.62282
9.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 28 w Fe(Con)n(tains)26
b(LLQueue's)h(Remo)n(v)n(e)g(function)-600 -600 y
tx@Dict begin  PutEnd  end
 -600
-600 a 0 TeXcolorgray 2567 2837 a Fe(8)p 0 TeXcolorgray
eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 9 x Fd(RB)45 b(Queue.h)-600 -600 y
tx@Dict begin  PutEnd  end
 -600
-600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5516
-585 a Fc(9/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray Fc(16)p
0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649
-585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#pragma)c(once)-600 -285 y(#include)f("pizza.h")-600
-185 y(#include)g(<string>)-600 -85 y(const)i(int)g(BUFSIZE)f(=)i(256;)
-600 14 y(class)f(RBQUEUE{)-600 114 y(private:)-426 214
y(std::string)d(name;)-426 313 y(std::string)g(buf[BUFSIZE];)-426
413 y(int)k(front;)-426 512 y(int)g(rear;)-426 612 y(int)g
(nextIndex\(int)38 b(index\){)-251 712 y(if\(++index)h(==)k(BUFSIZE\))d
(index)i(=)h(0;)-251 811 y(return)e(index;)-426 911 y(})-600
1011 y(public:)-426 1110 y(void)h(setName\(std::stri)o(ng)37
b(s\))43 b({name)e(=)i(s;})-426 1210 y(RBQUEUE)e(\(\))i({front)e(=)i
(rear)f(=)h(0;})-426 1310 y(~RBQUEUE)e(\(\))h({/*)h(*/})-426
1409 y(bool)f(Insert\(std::strin)o(g)37 b(s\);)-426 1509
y(bool)42 b(Remove)f(\(std::string)e(&s\);)-426 1608
y(bool)j(isEmpty\(\))e({return)h(\(front==rear\);})-426
1708 y(bool)h(isFull\(\))f({return)f(\(nextIndex\(rear\))d(==)43
b(front\);})-600 1808 y(};)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600
-600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600 a -578 -520 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.59721 neg 136.5447
9.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial 28 w Fe(Con)n(tains)26 b(the)i(class)f(RBQueue)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 2567 2837 a Fe(9)p
0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 9 x Fd(RB)45 b(Queue)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5483
-585 a Fc(10/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#include)40 b("pizza.h")-600 -185 y(bool)i(RBQUEUE::Insert)37
b(\(std::string)i(s\){)-426 -85 y(if)k(\(isFull\(\)\))d(return)h
(false;)-426 14 y(buf[rear])f(=)j(s;)-426 114 y(rear)f(=)h
(nextIndex\(rear\);)-426 214 y(return)e(true;)-600 313
y(})-600 512 y(bool)h(RBQUEUE::Remove)37 b(\(std::string)i(&s\){)-426
612 y(if\(isEmpty\(\)\))g(return)i(false;)-426 712 y(s)j(=)f
(buf[front];)-426 811 y(front)f(=)h(nextIndex\(front\))o(;)-426
911 y(return)e(true;)-600 1011 y(})-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600 a -578 -520 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.59721 neg 221.02516
9.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial 28 w Fe(Con)n(tains)26 b(the)i(de\014nitions)g(of)g
(RBQueue's)f(functions)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray
2547 2837 a Fe(10)p 0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.11) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 21 x Fd(Order)45 b(cb)-600 -600 y
tx@Dict begin  PutEnd  end
 -600
-600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5483
-585 a Fc(11/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#include)40 b("pizza.h")-600 -285 y(LLQUEUE)h(orderQueue;)-600
-185 y(void)h(order_cb\(Fl_Butt)o(on)o(*,v)o(oi)o(d*\))o({)-426
14 y(Order)g(o;)-426 114 y(std::cout)e(<<)j(pizza->value\(\))38
b(<<)43 b(std::endl;)-426 214 y(o.setOrder\(pizza-)o(>v)o(alu)o(e\()o
(\)\);)-426 512 y(std::cout)d(<<)j(addressName->val)o(ue\()o(\))37
b(<<)43 b(std::endl;)-426 612 y(o.setAddress\(addr)o(es)o(sNa)o(me)o
(->v)o(al)o(ue\()o(\)\))o(;)-426 811 y(status)e(=)j(orderQueue.Inse)o
(rt\()o(o\))o(;)-426 1011 y(if\(status)c(==)j(true\))-251
1110 y(std::cout)d(<<)i("Inserted")e(<<)j(std::endl;)-426
1210 y(else)f(std::cout)e(<<)j("Queue)e(overflowed")e(<<)k(std::endl;)
-426 1608 y(std::string)c(s)44 b(=)f("Magnificent)38
b(Choice";)-426 1708 y(fl_alert\(s.c_str\()o(\)\))o(;)-600
1808 y(})-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600
a -578 -360 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 23.87498 neg 167.27126
28.875 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-518 -520 a Fb(\017)j Fe(Gets)28 b(the)g(Pizza)e(from)i(the)g(GUI)-536
-421 y Fb(\017)41 b Fe(Gets)27 b(the)h(Address)f(from)h(the)g(GUI)-536
-321 y Fb(\017)41 b Fe(Places)26 b(b)r(oth)i(in)g(an)f(Order)f(t)n(yp)r
(e)-536 -221 y Fb(\017)41 b Fe(Inserts)27 b(Order)f(in)n(to)h(the)h
(Queue)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 2547 2837
a Fe(11)p 0 TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.12) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 21 x Fd(Driv)l(er)46 b(cb)-600 -600 y
tx@Dict begin  PutEnd  end
 -600
-600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5483
-585 a Fc(12/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#include)40 b("pizza.h")-600 -285 y(RBQUEUE)h(driverQueue;)-600
-185 y(void)h(driver_cb\(Fl_But)o(to)o(n*,)o(vo)o(id*)o(\){)-426
14 y(std::cout)e(<<)j(driverName->valu)o(e\(\))37 b(<<)42
b(std::endl;)-426 114 y(status)f(=)j(driverQueue.Ins)o(ert)o(\(d)o(riv)
o(er)o(Na)o(me-)o(>v)o(alu)o(e\()o(\)\))o(;)-426 214
y(if\(status)c(==)j(true\))-251 313 y(std::cout)d(<<)i("Driver)f
(Inserted")f(<<)j(std::endl;)-426 413 y(else)f(std::cout)e(<<)j("Queue)
e(Overflow")f(<<)j(std::endl;)-426 512 y(std::string)c(s)44
b(=)f("Driver)d(is)j(Ready";)-426 612 y(fl_alert\(s.c_str\()o(\)\))o(;)
-600 712 y(})-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600
-600 a -578 -460 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 11.87498 neg 151.90797
16.875 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-518 -520 a Fb(\017)e Fe(Gets)28 b(driv)n(er)e(from)h(the)h(GUI)-536
-421 y Fb(\017)41 b Fe(Places)26 b(driv)n(er)g(in)n(to)i(the)f(queue)
-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 2547 2837 a Fe(12)p
0 TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.13) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 9 x Fd(Dispatc)l(h)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5483
-585 a Fc(13/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#include)40 b("pizza.h")-600 -285 y(void)i(dispatch\(void*\){)-426
-185 y(std::cout)e(<<)j("ok")f(<<)h(std::endl;)-426 -85
y(deliver\(\);)-426 14 y(Fl::repeat_timeou)o(t\()o(10,)o(di)o(spa)o(tc)
o(h\);)-600 114 y(})-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600
a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600 a -578 -520 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.59721 neg 259.4275
9.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
28 w Fe(Rep)r(eats)27 b(the)h(deliv)n(er)f(function)h(after)f(a)h(set)f
(amoun)n(t)g(of)h(time)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray
2547 2837 a Fe(13)p 0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 21 x Fd(Deliv)l(er)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5483
-585 a Fc(14/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a 0 TeXcolorgray 0 TeXcolorgray 216
x Fa(#include)40 b("pizza.h")-600 -185 y(void)i(deliver\(\){)-426
-85 y(while\(status)d(==)k(true)f(&&)g(!driverQueue.isEm)o(pty)o(\(\))
37 b(&&)43 b(!orderQueue.isE)o(mpt)o(y\()o(\)\){)-251
14 y(Order)e(myOrder;)-251 114 y(orderQueue.Remo)o(ve\()o(my)o(Ord)o
(er)o(\);)-251 214 y(std::string)e(driverName)g(;)-251
313 y(driverQueue.Rem)o(ove)o(\(d)o(riv)o(er)o(Nam)o(e\))o(;)-251
413 y(std::string)g(s)k(=)g("Driver)e(")i(+)g(driverName)d(+)j(")g(is)g
(delivering)c(the)j(")-251 512 y(+)h(myOrder.getOrder)o(\(\))37
b(+)43 b(")g(pizza)f(to)h(")g(+)g(myOrder.getAddre)o(ss\()o(\);)-251
612 y(fl_alert\(s.c_st)o(r\(\))o(\);)-426 712 y(})-600
811 y(})-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a -600 -600 a
tx@Dict begin { 460.80469 -115.20117 } PutCoor PutBegin  end
 -600 -600
a -578 -471 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 10.59721 neg 159.58376
15.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-559 -520 a Fe(Sends)19 b(the)h(\014rst)e(driv)n(er)g(and)h(\014rst)g
(pizza)-578 -421 y(out)28 b(of)f(the)h(queue,)g(if)g(they)g(exist)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 2547 2837 a Fe(14)p
0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.15) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 21 x Fd(Main)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5483 -585 a Fc(15/)5582 -585
y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray Fc(16)p 0 TeXcolorgray 5649
-623 a
SDict begin H.R end
 5649 -623 a 5649 -585 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600
a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600
-600 a 0 TeXcolorgray 0 TeXcolorgray 216 x Fa(#include)40
b("pizza.h")-600 -285 y(Fl_Input*)g(pizza;Fl_Input*)d
(driverName;Fl_Inp)o(ut)o(*)h(addressName;)-600 -185
y(bool)k(status;)-600 -85 y(int)g(main\(\){)-426 14 y(Fl_Cairo_Window)c
(cw\(300,300\);)-426 114 y(cw.color\(fl_rgb_c)o(ol)o(or\()o(76)o(,20)o
(1,)o(140)o(\)\))o(;)-426 214 y(Fl_Button)i(order\(150,150,50,)o(30)o
(,"O)o(rd)o(er)o("\);)-426 313 y(order.callback\(\(F)o(l_)o(Cal)o(lb)o
(ack)o(*\))o(ord)o(er)o(_c)o(b\);)-426 413 y(order.color\(fl_rg)o(b_)o
(col)o(or)o(\(10)o(0,)o(188)o(,2)o(31)o(\)\);)-426 512
y(pizza)i(=)h(new)f(Fl_Input\(100,100,)o(180)o(,2)o(0,)o("Pi)o(zz)o
(a:")o(\);)-426 612 y(addressName)d(=)44 b(new)e(Fl_Input\(100,50,)o
(18)o(0,2)o(0,)o("Ad)o(dr)o(es)o(s:")o(\);)-426 712 y(Fl_Button)e
(driver\(150,250,50)o(,3)o(0,")o(Dr)o(iv)o(er")o(\);)-426
811 y(driver.callback\(\()o(Fl)o(_Ca)o(ll)o(bac)o(k*)o(\)dr)o(iv)o(er)o
(_cb)o(\);)-426 911 y(driver.color\(fl_r)o(gb)o(_co)o(lo)o(r\(1)o(00)o
(,18)o(8,)o(23)o(1\)\))o(;)-426 1011 y(driverName)g(=)j(new)f
(Fl_Input\(100,200,)o(18)o(0,2)o(0,)o("Dr)o(iv)o(er)o(:"\))o(;)-426
1110 y(cw.show\(\);)-426 1210 y(std::string)d(s)44 b(=)f("Don't)e
(forget)g(to)i(submit)e(an)i(address";)-426 1310 y(fl_alert\(s.c_str\()
o(\)\))o(;)-426 1409 y(Fl::add_timeout\(5)o(,d)o(isp)o(at)o(ch\))o(;)
-426 1509 y(Fl::run\(\);)-600 1608 y(})-600 -600 y
tx@Dict begin  PutEnd  end
 -600
-600 a -600 -600 a
tx@Dict begin { 384.0 -115.20117 } PutCoor PutBegin  end
 -600 -600 a -578 -479 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 9.62498 neg 197.9861
14.625 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -550 -520 a Fe(Creates)26 b(the)i(GUI)f(and)h
(executes)f(all)g(the)h(other)-578 -421 y(function)-600
-600 y
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray 2547 2837 a Fe(15)p
0 TeXcolorgray eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -608
-916 a
SDict begin H.S end
 -608 -916 a -608 -916 a
SDict begin H.R end
 -608 -916 a -608 -916
a
SDict begin [/View [/XYZ H.V]/Dest (page.16) cvn /DEST pdfmark end
 -608 -916 a 0 TeXcolorgray 0 TeXcolorgray -600 -600
a
tx@Dict begin { 38.40234 -26.88281 } PutCoor PutBegin  end
 -600 -600 a 20 x Fd(T)-11 b(est)-600 -600 y
tx@Dict begin  PutEnd  end
 -600 -600
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -34.5586 38.40234 -34.5586   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -36.48047 0.0 -36.48047   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600 -600 a
tx@Dict begin { 7.67578 -374.40234 } PutCoor PutBegin  end
 -600 -600 a 5483
-585 a Fc(16/)5582 -585 y
SDict begin H.S end
 5582 -585 a 0 TeXcolorgray
Fc(16)p 0 TeXcolorgray 5649 -623 a
SDict begin H.R end
 5649 -623 a 5649 -585
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.16) cvn H.B /ANN pdfmark end
 5649 -585 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
768.0 -362.88281 38.40234 -362.88281   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.43057 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
652.80469 -360.96094 0.0 -360.96094   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.43057 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -600
-600 a
tx@Dict begin { 38.40234 -53.75977 } PutCoor PutBegin  end
 -600 -600 a -572 -600 a
tx@Dict begin { 192.0 -153.59766 } PutCoor PutBegin  end
 -572 -600 a -550 -520
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0 0 1  setrgbcolor  5.0 false 2.65277 neg 4.59721 neg 274.79079
9.59721 .5 Frame  gsave 1  setgray  1. .setopacityalpha  fill  grestore
gsave 0.5 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fe(The)25 b(test)h(of)g(the)g
(Program)d(can)i(b)r(e)h(seen)f(in)h(the)g(video)f(\014le)h(included)
-572 -600 y
tx@Dict begin  PutEnd  end
 -572 -600 a -600 -600 a
tx@Dict begin  PutEnd  end
 -600 -600 a 0 TeXcolorgray
2547 2837 a Fe(16)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
